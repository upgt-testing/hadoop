package org.apache.hadoop.hdfs.server.namenode;


import org.apache.hadoop.http.HttpServer2;

import java.net.InetSocketAddress;

public interface NameNodeInterface {
    String clz = "org.apache.hadoop.hdfs.server.namenode.NameNode";
    InetSocketAddress getHttpAddress();
    //FSNamesystem getNamesystem();
    HttpServer2 getHttpServer();
    boolean isInSafeMode();
    java.lang.String getSlowDisksReport();
    //void transitionToActive() throws org.apache.hadoop.ha.ServiceFailedException, org.apache.hadoop.security.AccessControlException;
    java.net.InetSocketAddress getServiceRpcAddress();
    //java.net.InetSocketAddress getServiceRpcServerAddress(Configuration arg0);
    //Configuration getNewConf();
    //java.lang.String reconfHeartbeatInterval(DatanodeManagerInterface arg0, java.lang.String arg1, java.lang.String arg2) throws org.apache.hadoop.conf.ReconfigurationException;
    boolean isStandbyState();
    java.net.InetSocketAddress getNameNodeAddress();
    //java.lang.String getLifelineRpcServerBindHost(Configuration arg0);
    //boolean isStarted();
    //org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole getRole();
    //void startTrashEmptier(Configuration arg0) throws java.io.IOException;
    //java.lang.String reconfigureParallelLoad(java.lang.String arg0);
    java.lang.String getSlowPeersReport();
    //void setStartupOption(Configuration arg0, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg1);
    //void stopHttpServer();
    //ReconfigurationTaskStatusInterface getReconfigurationTaskStatus();
    FSImage getFSImage();
    boolean isActiveState();
    void joinHttpServer();
    //java.lang.String reconfigureSlowNodesParameters(DatanodeManagerInterface arg0, java.lang.String arg1, java.lang.String arg2) throws org.apache.hadoop.conf.ReconfigurationException;
    //void setRpcServerAddress(Configuration arg0, java.net.InetSocketAddress arg1);
    java.lang.String getState();
    //void format(Configuration arg0) throws java.io.IOException;
    java.lang.String getTokenServiceName();
    java.lang.String getNameNodeAddressHostPortString();
    void shutdownReconfigurationTask();
    void startReconfigurationTask() throws java.io.IOException;
    //Configuration getConfigurationWithoutSharedEdits(Configuration arg0) throws java.io.IOException;
    //void setRpcServiceServerAddress(Configuration arg0, java.net.InetSocketAddress arg1);
    //void checkHaStateChange(StateChangeRequestInfoInterface arg0) throws org.apache.hadoop.security.AccessControlException;
    //HAStateInterface createHAState(org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg0);
    //void setServiceAddress(Configuration arg0, java.lang.String arg1);
    //java.net.InetSocketAddress getHttpServerAddress(Configuration arg0);
    //boolean initializeSharedEdits(Configuration arg0, boolean arg1, boolean arg2) throws java.io.IOException;
    //java.net.InetSocketAddress getServiceAddress(Configuration arg0, boolean arg1);
    //org.apache.hadoop.hdfs.server.protocol.NamenodeProtocols getRpcServer();
    long getProtocolVersion(java.lang.String arg0, long arg1) throws java.io.IOException;
    //HAServiceStatusInterface getServiceStatus() throws org.apache.hadoop.ha.ServiceFailedException, org.apache.hadoop.security.AccessControlException;
    boolean isObserverState();
    long getBytesWithFutureGenerationStamps();
    //org.apache.hadoop.ha.HAServiceProtocol.HAServiceState getServiceState();
    long getLastHATransitionTime();
    //boolean doRollback(Configuration arg0, boolean arg1) throws java.io.IOException;
    //HttpServer2Interface getHttpServer();
    //org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption parseArguments(java.lang.String[] arg0);
    //void startMetricsLogger(Configuration arg0);
    //java.lang.String reconfigureIPCBackoffEnabled(java.lang.String arg0);
    //void transitionToStandby() throws org.apache.hadoop.ha.ServiceFailedException, org.apache.hadoop.security.AccessControlException;
    //void main(java.lang.String[] arg0) throws java.lang.Exception;
    //boolean initializeSharedEdits(Configuration arg0, boolean arg1) throws java.io.IOException;
    //java.lang.String getNNRole();
    //void initMetrics(Configuration arg0, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole arg1);
    //FSNamesystemInterface getNamesystem();
    //void registerNNSMXBean();
    //void startHttpServer(Configuration arg0) throws java.io.IOException;
    //java.lang.String composeNotStartedMessage(org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole arg0);
    //java.lang.String reconfigureBlockInvalidateLimit(DatanodeManagerInterface arg0, java.lang.String arg1, java.lang.String arg2) throws org.apache.hadoop.conf.ReconfigurationException;
    //boolean testRMIPrint(java.lang.String arg0);
    //java.lang.String getServiceRpcServerBindHost(Configuration arg0);
    //void startCommonServices(Configuration arg0) throws java.io.IOException;
    //NameNodeRpcServerInterface createRpcServer(Configuration arg0) throws java.io.IOException;
    //void setConf(Configuration arg0);
    //void startAliasMapServerIfNecessary(Configuration arg0) throws java.io.IOException;
    //void initializeGenericKeys(Configuration arg0, java.lang.String arg1, java.lang.String arg2);
    //void doImmediateShutdown(java.lang.Throwable arg0) throws org.apache.hadoop.util.ExitUtil.ExitException;
    //void stopMetricsLogger();
    //java.lang.String reconfReplicationParameters(java.lang.String arg0, java.lang.String arg1) throws org.apache.hadoop.conf.ReconfigurationException;
    //boolean initializeSharedEdits(Configuration arg0) throws java.io.IOException;
    //java.net.InetSocketAddress getLifelineRpcServerAddress(Configuration arg0);
    //boolean isRole(org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole arg0);
    //java.net.InetSocketAddress getHttpAddress();
    //void stopTrashEmptier();
    //org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption getStartupOption(Configuration arg0);
    boolean isPropertyReconfigurable(java.lang.String arg0);
    //void reconfBlockPlacementPolicy();
    //java.lang.String reconfigurePropertyImpl(java.lang.String arg0, java.lang.String arg1) throws org.apache.hadoop.conf.ReconfigurationException;
    //int adjustNewVal(int arg0, java.lang.String arg1);
    //boolean printMetadataVersion(Configuration arg0) throws java.io.IOException;
    void stop();
    //void doRecovery(org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg0, Configuration arg1) throws java.io.IOException;
    //NameNodeMetricsInterface getNameNodeMetrics();
    //void stopCommonServices();
    //void transitionToObserver() throws org.apache.hadoop.ha.ServiceFailedException, org.apache.hadoop.security.AccessControlException;
    //void setReconfigurationUtil(ReconfigurationUtilInterface arg0);
    //org.apache.hadoop.hdfs.server.namenode.ha.HAContext createHAContext();
    //void queueExternalCall(ExternalCallInterface<?> arg0) throws java.io.IOException, java.lang.InterruptedException;
    //java.lang.String reconfHeartbeatRecheckInterval(DatanodeManagerInterface arg0, java.lang.String arg1, java.lang.String arg2) throws org.apache.hadoop.conf.ReconfigurationException;
    //void testRMIConf(Configuration arg0);
    //void testRMIConf(org.apache.hadoop.conf.Configuration arg0);
    //void setRpcLifelineServerAddress(Configuration arg0, java.net.InetSocketAddress arg1);
    //void copyEditLogSegmentsToSharedDir(FSNamesystemInterface arg0, java.util.Collection<java.net.URI> arg1, NNStorageInterface arg2, Configuration arg3) throws java.io.IOException;
    //Configuration getConf();
    boolean isSecurityEnabled();
    //void checkAllowFormat(Configuration arg0) throws java.io.IOException;
    //InMemoryLevelDBAliasMapServerInterface getAliasMapServer();
    //void stopAtException(java.lang.Exception arg0);
    //java.net.InetSocketAddress getRpcServerAddress(Configuration arg0);
    java.lang.String getNNAuxiliaryRpcAddress();
    //java.lang.String getTrimmedOrNull(Configuration arg0, java.lang.String arg1);
    //void initReconfigurableBackoffKey();
    //void monitorHealth() throws org.apache.hadoop.ha.HealthCheckFailedException, org.apache.hadoop.security.AccessControlException;
    //java.lang.String buildBackoffEnableKey(int arg0);
    java.lang.String getHostAndPort();
    //java.lang.String reconfigureSPSModeEvent(java.lang.String arg0, java.lang.String arg1) throws org.apache.hadoop.conf.ReconfigurationException;
    //NamenodeRegistrationInterface getRegistration();
    //void initialize(Configuration arg0) throws java.io.IOException;
    //boolean format(Configuration arg0, boolean arg1, boolean arg2) throws java.io.IOException;
    //java.net.InetSocketAddress getHttpAddress(Configuration arg0);
    //void loadNamesystem(Configuration arg0) throws java.io.IOException;
    //java.lang.String reconfCallerContextEnabled(java.lang.String arg0);
    //NamenodeRegistrationInterface setRegistration();
    //UserGroupInformationInterface getRemoteUser() throws java.io.IOException;
    java.util.Set<java.net.InetSocketAddress> getAuxiliaryNameNodeAddresses();
    //void loginAsNameNodeUser(Configuration arg0) throws java.io.IOException;
    //java.lang.String getRpcServerBindHost(Configuration arg0);
    java.net.InetSocketAddress getHttpsAddress();
    //void printUsage(java.io.PrintStream arg0);
    //java.lang.String reconfProtectedDirectories(java.lang.String arg0);
    //java.lang.String getNameServiceId(Configuration arg0);
    //void verifyToken(DelegationTokenIdentifierInterface arg0, byte[] arg1) throws java.io.IOException;
    java.lang.String getClientNamenodeAddress();
    //StartupProgressInterface getStartupProgress();
    //boolean isStopRequested();
    java.util.Collection<java.lang.String> getReconfigurableProperties();
    void join();
    //java.util.Collection<org.apache.hadoop.conf.ReconfigurationUtil.PropertyChange> getChangedProperties(Configuration arg0, Configuration arg1);
    void reconfigureProperty(java.lang.String arg0, java.lang.String arg1) throws org.apache.hadoop.conf.ReconfigurationException;
    //NameNodeInterface createNameNode(java.lang.String[] arg0, Configuration arg1) throws java.io.IOException;
    //java.net.InetSocketAddress getHttpServerBindAddress(Configuration arg0);
    //java.util.List<NameNodeFakeInterface> getFakeNameNodes();
    //NameNodeFakeInterface getFakeNameNode(int id);
}