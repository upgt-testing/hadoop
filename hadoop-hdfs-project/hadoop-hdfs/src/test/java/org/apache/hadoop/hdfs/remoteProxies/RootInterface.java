package org.apache.hadoop.hdfs.remoteProxies;

public interface RootInterface {
    void cleanSubtree(ReclaimContextInterface arg0, int arg1, int arg2);
    void clear();
    boolean isRoot();
    int getChildrenNum(int arg0);
    java.lang.String toString();
    void setParentReference(INodeReferenceInterface arg0);
    void addFeature(org.apache.hadoop.hdfs.server.namenode.INode.Feature arg0);
    DirectoryWithQuotaFeatureInterface addDirectoryWithQuotaFeature(DirectoryWithQuotaFeatureInterface arg0);
    long getAccessTime(int arg0);
    void setUser(java.lang.String arg0);
    org.apache.hadoop.hdfs.server.namenode.INode.Feature[] getFeatures();
    INodeInterface saveChild2Snapshot(INodeInterface arg0, int arg1, INodeInterface arg2);
    SnapshotInterface removeSnapshot(ReclaimContextInterface arg0, java.lang.String arg1, long arg2) throws org.apache.hadoop.hdfs.protocol.SnapshotException;
    long getModificationTime();
    boolean addChildAtLoading(INodeInterface arg0);
    java.lang.String getGroupName(int arg0);
    java.lang.String getUserName(int arg0);
    byte getStoragePolicyID();
    void setSnapshotQuota(int arg0);
    byte[] getLocalNameBytes();
    PermissionStatusInterface getPermissionStatus();
    byte[][] getPathComponents(java.lang.String arg0);
    void cloneModificationTime(INodeWithAdditionalFieldsInterface arg0);
    void setParent(INodeDirectoryInterface arg0);
    DirectoryWithSnapshotFeatureInterface getDirectoryWithSnapshotFeature();
    boolean isLastReference();
    <T> T getFeature(java.lang.Class<? extends org.apache.hadoop.hdfs.server.namenode.INode.Feature> arg0);
    byte[][] getPathComponents();
    void renameSnapshot(java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, long arg3) throws org.apache.hadoop.hdfs.protocol.SnapshotException;
    INodeInterface removeAclFeature(int arg0);
    SnapshotInterface getSnapshot(byte[] arg0);
    INodeDirectoryInterface valueOf(INodeInterface arg0, java.lang.Object arg1) throws java.io.FileNotFoundException, org.apache.hadoop.fs.PathIsNotDirectoryException;
    INodeInterface setGroup(java.lang.String arg0, int arg1);
    java.lang.String toDetailString();
    org.apache.hadoop.hdfs.server.namenode.INodeDirectoryAttributes getSnapshotINode(int arg0);
    boolean isSnapshottable();
//    org.apache.hadoop.hdfs.server.namenode.INodeAttributes getSnapshotINode(int arg0);
    INodeInterface removeXAttrFeature(int arg0);
    INodeReferenceInterface getParentReference();
    ContentSummaryInterface computeContentSummary(BlockStoragePolicySuiteInterface arg0) throws org.apache.hadoop.security.AccessControlException;
//    K getKey();
    boolean isSetStoragePolicy();
    void addXAttrFeature(XAttrFeatureInterface arg0);
    boolean isQuotaSet();
    SnapshotInterface addSnapshot(int arg0, java.lang.String arg1, LeaseManagerInterface arg2, boolean arg3, int arg4, long arg5) throws org.apache.hadoop.hdfs.protocol.SnapshotException;
    void setNext(org.apache.hadoop.util.LightWeightGSet.LinkedElement arg0);
    boolean isDeleted();
    void addAclFeature(AclFeatureInterface arg0);
    org.apache.hadoop.hdfs.util.ReadOnlyList<org.apache.hadoop.hdfs.server.namenode.INode> getChildrenList(int arg0);
    WithNameInterface replaceChild4ReferenceWithName(INodeInterface arg0, int arg1);
    long getModificationTime(int arg0);
    void setLocalName(byte[] arg0);
    boolean isDirectory();
    void recordModification(int arg0);
    boolean addChild(INodeInterface arg0, boolean arg1, int arg2);
    INodeFileInterface asFile();
    void addSnapshottableFeature();
    byte getLocalStoragePolicyID();
    boolean isReference();
    byte[] getKey();
    int compareTo(byte[] arg0);
    PermissionStatusInterface getPermissionStatus(int arg0);
    FsPermissionInterface getFsPermission();
    INodeInterface addXAttrFeature(XAttrFeatureInterface arg0, int arg1);
    INodeInterface setAccessTime(long arg0, int arg1, boolean arg2);
    void replaceChild(INodeInterface arg0, INodeInterface arg1, INodeMapInterface arg2);
    QuotaCountsInterface getQuotaCounts();
    boolean isValidAbsolutePath(java.lang.String arg0);
    java.lang.String getRootFullPathName();
    boolean isAncestorDirectory(INodeDirectoryInterface arg0);
    boolean equals(java.lang.Object arg0);
    INodeInterface setPermission(FsPermissionInterface arg0, int arg1);
    DirectoryWithSnapshotFeatureInterface addSnapshotFeature(DirectoryDiffListInterface arg0);
    boolean isWithQuota();
    XAttrFeatureInterface getXAttrFeature(int arg0);
    boolean removeChild(INodeInterface arg0);
    void addChild(INodeInterface arg0, int arg1);
    DirectorySnapshottableFeatureInterface getDirectorySnapshottableFeature();
    byte getStoragePolicyIDForQuota(byte arg0);
    void dumpTreeRecursively(java.io.PrintWriter arg0, java.lang.StringBuilder arg1, int arg2);
    AclFeatureInterface getAclFeature(int arg0);
    boolean isInLatestSnapshot(int arg0);
    java.lang.String getGroupName();
    INodeSymlinkInterface asSymlink();
    boolean metadataEquals(org.apache.hadoop.hdfs.server.namenode.INodeDirectoryAttributes arg0);
    void dumpTreeRecursively(java.io.PrintWriter arg0, java.lang.StringBuilder arg1, java.lang.Iterable<org.apache.hadoop.hdfs.server.namenode.INodeDirectory.SnapshotAndINode> arg2);
    int searchChild(INodeInterface arg0);
    void removeXAttrFeature();
    INodeInterface updateModificationTime(long arg0, int arg1);
    ContentSummaryComputationContextInterface computeContentSummary(int arg0, ContentSummaryComputationContextInterface arg1) throws org.apache.hadoop.security.AccessControlException;
    QuotaCountsInterface computeQuotaUsage4CurrentDirectory(BlockStoragePolicySuiteInterface arg0, byte arg1, QuotaCountsInterface arg2);
    boolean isInCurrentState();
    void checkAbsolutePath(java.lang.String arg0);
    org.apache.hadoop.util.LightWeightGSet.LinkedElement getNext();
    INodeInterface addAclFeature(AclFeatureInterface arg0, int arg1);
    java.lang.String getParentString();
    void addSpaceConsumed(QuotaCountsInterface arg0);
    void setGroup(java.lang.String arg0);
    boolean isDescendantOfSnapshotRoot(INodeDirectoryInterface arg0);
    void setQuota(BlockStoragePolicySuiteInterface arg0, long arg1, long arg2, org.apache.hadoop.fs.StorageType arg3);
    void removeFeature(org.apache.hadoop.hdfs.server.namenode.INode.Feature arg0);
    INodeDirectoryInterface asDirectory();
    INodeInterface setUser(java.lang.String arg0, int arg1);
    java.lang.String[] getPathNames(java.lang.String arg0);
    short getFsPermissionShort();
    void destroyAndCollectBlocks(ReclaimContextInterface arg0);
    int hashCode();
    XAttrFeatureInterface getXAttrFeature();
    void clonePermissionStatus(INodeWithAdditionalFieldsInterface arg0);
    INodeDirectoryInterface getParent();
    void removeAclFeature();
    boolean removeChild(INodeInterface arg0, int arg1);
    QuotaCountsInterface computeDirectoryQuotaUsage(BlockStoragePolicySuiteInterface arg0, byte arg1, QuotaCountsInterface arg2, boolean arg3, int arg4);
    ContentSummaryInterface computeAndConvertContentSummary(int arg0, ContentSummaryComputationContextInterface arg1) throws org.apache.hadoop.security.AccessControlException;
    INodeInterface setModificationTime(long arg0, int arg1);
    int nextChild(org.apache.hadoop.hdfs.util.ReadOnlyList<org.apache.hadoop.hdfs.server.namenode.INode> arg0, byte[] arg1);
    void setPermission(FsPermissionInterface arg0);
    FsPermissionInterface getFsPermission(int arg0);
    INodeReferenceInterface asReference();
    void clearChildren();
    boolean addChild(INodeInterface arg0);
    java.lang.String getUserName();
    long getPermissionLong();
    INodeInterface getChild(byte[] arg0, int arg1);
    void cleanSubtreeRecursively(ReclaimContextInterface arg0, int arg1, int arg2, java.util.Map<org.apache.hadoop.hdfs.server.namenode.INode, org.apache.hadoop.hdfs.server.namenode.INode> arg3);
    DirectoryDiffListInterface getDiffs();
    void setModificationTime(long arg0);
//    void updatePermissionStatus(org.apache.hadoop.hdfs.server.namenode.INodeWithAdditionalFields.PermissionStatusFormat arg0, long arg1);
    void setAccessTime(long arg0);
    boolean isFile();
    boolean shouldRecordInSrcSnapshot(int arg0);
    long getAccessTime();
    boolean isWithSnapshot();
    void undoRename4DstParent(BlockStoragePolicySuiteInterface arg0, INodeInterface arg1, int arg2);
    QuotaCountsInterface computeQuotaUsage(BlockStoragePolicySuiteInterface arg0, byte arg1, boolean arg2, int arg3);
    java.lang.String getLocalName();
    java.lang.String getObjectString();
    QuotaCountsInterface computeQuotaUsage(BlockStoragePolicySuiteInterface arg0);
    void throwFeatureNotFoundException(org.apache.hadoop.hdfs.server.namenode.INode.Feature arg0);
    void dumpTreeRecursively(java.io.PrintStream arg0);
    org.apache.hadoop.hdfs.util.ReadOnlyList<org.apache.hadoop.hdfs.server.namenode.INode> getCurrentChildrenList();
    ContentSummaryComputationContextInterface computeDirectoryContentSummary(ContentSummaryComputationContextInterface arg0, int arg1) throws org.apache.hadoop.security.AccessControlException;
    boolean isSymlink();
    DirectoryWithQuotaFeatureInterface getDirectoryWithQuotaFeature();
    int searchChildren(byte[] arg0);
    void removeSnapshottableFeature();
    AclFeatureInterface getAclFeature();
    QuotaCountsInterface computeQuotaUsage(BlockStoragePolicySuiteInterface arg0, boolean arg1);
    void undoRename4ScrParent(INodeReferenceInterface arg0, INodeInterface arg1);
    long getId();
    java.lang.String getFullPathName();
    java.lang.StringBuffer dumpTreeRecursively();
}