package org.apache.hadoop.hdfs.remoteProxies;

public interface NodeInterface {
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5);
    java.lang.String getPath();
    java.lang.String getTag();
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8, E arg9);
    void removeRange(int arg0, int arg1);
    java.lang.String toString(boolean arg0);
    int hugeCapacity(int arg0);
//    java.util.Iterator<E> iterator();
    java.lang.String getString(java.lang.String arg0, boolean arg1, boolean arg2);
//    boolean add(E arg0);
    <E> java.util.List<E> of(E... arg0);
    boolean removeAll(java.util.Collection<?> arg0);
    int lastIndexOf(java.lang.Object arg0);
    int indexOf(java.lang.Object arg0);
    void subListRangeCheck(int arg0, int arg1, int arg2);
//    boolean addAll(int arg0, java.util.Collection<? extends E> arg1);
    NodeInterface get(java.lang.String arg0);
    <E> java.util.List<E> of();
    <E> java.util.List<E> of(E arg0);
    NodeInterface getParent();
    void rangeCheckForAdd(int arg0);
//    void sort(java.util.Comparator<? super E> arg0);
//    java.util.Spliterator<E> spliterator();
    <E> java.util.List<E> copyOf(java.util.Collection<? extends E> arg0);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8);
//    java.util.ListIterator<E> listIterator(int arg0);
    java.lang.String toString(boolean arg0, boolean arg1);
    void toString(java.lang.StringBuilder arg0, boolean arg1);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6);
    java.lang.String getAttribute(java.lang.String arg0, java.lang.String arg1);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4);
//    boolean addAll(java.util.Collection<? extends E> arg0);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3);
    boolean containsAll(java.util.Collection<?> arg0);
//    E get(int arg0);
    int hashCode();
//    java.util.ListIterator<E> listIterator();
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7);
    <T> T[] toArray(java.util.function.IntFunction<T[]> arg0);
    java.lang.String toString();
    boolean equals(java.lang.Object arg0);
//    java.util.stream.Stream<E> stream();
//    E remove(int arg0);
//    java.util.stream.Stream<E> parallelStream();
//    void replaceAll(java.util.function.UnaryOperator<E> arg0);
    int size();
    boolean isEmpty();
    AttributeInterface[] getAttributes();
    <T> T[] toArray(T[] arg0);
    boolean retainAll(java.util.Collection<?> arg0);
    void clear();
    boolean contains(java.lang.Object arg0);
    <E> java.util.List<E> of(E arg0, E arg1);
    java.lang.String getAttribute(java.lang.String arg0);
//    java.util.List<E> subList(int arg0, int arg1);
//    java.util.Iterator<T> iterator();
    boolean remove(java.lang.Object arg0);
    java.util.Iterator<org.eclipse.jetty.xml.XmlParser.Node> iterator(java.lang.String arg0);
//    boolean removeIf(java.util.function.Predicate<? super E> arg0);
    java.lang.Object get(int arg0);
//    void forEach(java.util.function.Consumer<? super T> arg0);
    <T> T[] finishToArray(T[] arg0, java.util.Iterator<?> arg1);
//    java.util.Spliterator<T> spliterator();
    java.lang.String outOfBoundsMsg(int arg0);
    java.lang.Object[] toArray();
//    E set(int arg0, E arg1);
    void add(int arg0, java.lang.Object arg1);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2);
}