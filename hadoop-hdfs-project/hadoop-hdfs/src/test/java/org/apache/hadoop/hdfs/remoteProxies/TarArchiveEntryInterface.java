package org.apache.hadoop.hdfs.remoteProxies;

public interface TarArchiveEntryInterface {
    int evaluateType(java.util.Map<java.lang.String, java.lang.String> arg0, byte[] arg1);
    void setModTime(long arg0);
    java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> getSparseHeaders();
    boolean isGNULongLinkEntry();
    java.lang.String getLinkName();
    boolean equals(TarArchiveEntryInterface arg0);
    void setNames(java.lang.String arg0, java.lang.String arg1);
    boolean isCharacterDevice();
    boolean isXstar(java.util.Map<java.lang.String, java.lang.String> arg0, byte[] arg1);
    int getUserId();
    boolean isExtended();
    boolean isGNUSparse();
    boolean isPaxGNUSparse();
    void setLinkName(java.lang.String arg0);
    void processPaxHeader(java.lang.String arg0, java.lang.String arg1) throws java.io.IOException;
    void setUserId(int arg0);
    boolean isLink();
    void parseTarHeader(byte[] arg0);
    void setCreationTime(java.nio.file.attribute.FileTime arg0);
    void readOsSpecificProperties(java.nio.file.Path arg0, java.nio.file.LinkOption... arg1) throws java.io.IOException;
    byte getLinkFlag();
    boolean isPaxGNU1XSparse();
    boolean isDirectory();
    long getRealSize();
    long getDataOffset();
    boolean isFIFO();
    int getDevMajor();
    java.nio.file.attribute.FileTime getLastModifiedTime();
    boolean isSparse();
    boolean isOldGNUSparse();
    java.nio.file.attribute.FileTime getStatusChangeTime();
    void setLastAccessTime(java.nio.file.attribute.FileTime arg0);
    void fillStarSparseData(java.util.Map<java.lang.String, java.lang.String> arg0) throws java.io.IOException;
    void setMode(int arg0);
    void setModTime(java.nio.file.attribute.FileTime arg0);
    boolean isStarSparse();
    void parseTarHeader(byte[] arg0, org.apache.commons.compress.archivers.zip.ZipEncoding arg1) throws java.io.IOException;
    void processPaxHeader(java.lang.String arg0, java.lang.String arg1, java.util.Map<java.lang.String, java.lang.String> arg2) throws java.io.IOException;
    int writeEntryHeaderOptionalTimeField(java.nio.file.attribute.FileTime arg0, int arg1, byte[] arg2, int arg3);
    boolean isGNULongNameEntry();
    void setDevMajor(int arg0);
    void setDevMinor(int arg0);
    void parseTarHeader(java.util.Map<java.lang.String, java.lang.String> arg0, byte[] arg1, org.apache.commons.compress.archivers.zip.ZipEncoding arg2, boolean arg3, boolean arg4) throws java.io.IOException;
    java.lang.String getGroupName();
    boolean isInvalidXtarTime(byte[] arg0, int arg1, int arg2);
    int hashCode();
    void updateEntryFromPaxHeaders(java.util.Map<java.lang.String, java.lang.String> arg0) throws java.io.IOException;
    boolean isCheckSumOK();
    long getLongGroupId();
    void setName(java.lang.String arg0);
    java.lang.String getName();
    TarArchiveEntryInterface[] getDirectoryEntries();
    void setUserId(long arg0);
    int writeEntryHeaderField(long arg0, byte[] arg1, int arg2, int arg3, boolean arg4);
    void setGroupName(java.lang.String arg0);
    void parseTarHeader(byte[] arg0, org.apache.commons.compress.archivers.zip.ZipEncoding arg1, boolean arg2, boolean arg3) throws java.io.IOException;
    void setUserName(java.lang.String arg0);
    java.nio.file.attribute.FileTime fileTimeFromOptionalSeconds(long arg0);
    int fill(int arg0, int arg1, byte[] arg2, int arg3);
    boolean isStreamContiguous();
    boolean isBlockDevice();
    void setSize(long arg0);
    java.nio.file.attribute.FileTime getCreationTime();
    int getDevMinor();
    java.nio.file.attribute.FileTime getLastAccessTime();
    boolean isDescendent(TarArchiveEntryInterface arg0);
    java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> getOrderedSparseHeaders() throws java.io.IOException;
    void fillGNUSparse0xData(java.util.Map<java.lang.String, java.lang.String> arg0);
    boolean equals(java.lang.Object arg0);
    java.lang.String getUserName();
    void writeEntryHeader(byte[] arg0);
    long parseOctalOrBinary(byte[] arg0, int arg1, int arg2, boolean arg3);
    void clearExtraPaxHeaders();
    boolean isInvalidPrefix(byte[] arg0);
    java.util.Date getLastModifiedDate();
    boolean isPaxHeader();
    java.util.Date getModTime();
    java.io.File getFile();
    long getSize();
    boolean isSymbolicLink();
    java.util.Map<java.lang.String, java.lang.String> getExtraPaxHeaders();
    java.lang.String normalizeFileName(java.lang.String arg0, boolean arg1);
    java.nio.file.Path getPath();
    long getLongUserId();
    int getMode();
    void readFileMode(java.nio.file.Path arg0, java.lang.String arg1, java.nio.file.LinkOption... arg2) throws java.io.IOException;
    void setGroupId(int arg0);
    void setSparseHeaders(java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> arg0);
    void setGroupId(long arg0);
    void setStatusChangeTime(java.nio.file.attribute.FileTime arg0);
    void writeEntryHeader(byte[] arg0, org.apache.commons.compress.archivers.zip.ZipEncoding arg1, boolean arg2) throws java.io.IOException;
    int getGroupId();
    void setDataOffset(long arg0);
    java.time.Instant parseInstantFromDecimalSeconds(java.lang.String arg0) throws java.io.IOException;
    boolean isGlobalPaxHeader();
    java.lang.String getExtraPaxHeader(java.lang.String arg0);
    void setLastModifiedTime(java.nio.file.attribute.FileTime arg0);
    void parseTarHeaderUnwrapped(java.util.Map<java.lang.String, java.lang.String> arg0, byte[] arg1, org.apache.commons.compress.archivers.zip.ZipEncoding arg2, boolean arg3, boolean arg4) throws java.io.IOException;
    void fillGNUSparse1xData(java.util.Map<java.lang.String, java.lang.String> arg0) throws java.io.IOException;
    void setIds(int arg0, int arg1);
    void setModTime(java.util.Date arg0);
    boolean isFile();
    int fill(byte arg0, int arg1, byte[] arg2, int arg3);
    void addPaxHeader(java.lang.String arg0, java.lang.String arg1);
}