package org.apache.hadoop.hdfs.remoteProxies;

public interface NetworkTopologyInterface {
    boolean isOnSameNodeGroup(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
    org.apache.hadoop.net.Node chooseRandom(java.lang.String arg0, java.util.Collection<org.apache.hadoop.net.Node> arg1);
    org.apache.hadoop.net.Node getNodeForNetworkLocation(org.apache.hadoop.net.Node arg0);
    NetworkTopologyInterface init(org.apache.hadoop.net.InnerNode.Factory arg0);
    int getNumOfNonEmptyRacks();
    int getNumOfLeaves();
    void countEmptyRacks();
    java.util.Random getRandom();
    void interAddNodeWithEmptyRack(org.apache.hadoop.net.Node arg0);
    void interRemoveNodeWithEmptyRack(org.apache.hadoop.net.Node arg0);
    void recommissionNode(org.apache.hadoop.net.Node arg0);
    boolean contains(org.apache.hadoop.net.Node arg0);
    org.apache.hadoop.net.Node chooseRandom(java.lang.String arg0);
    org.apache.hadoop.net.Node getNode(java.lang.String arg0);
    NetworkTopologyInterface getInstance(ConfigurationInterface arg0);
    void remove(org.apache.hadoop.net.Node arg0);
    NetworkTopologyInterface getInstance(ConfigurationInterface arg0, org.apache.hadoop.net.InnerNode.Factory arg1);
    int getWeightUsingNetworkLocation(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
    java.lang.String getFirstHalf(java.lang.String arg0);
    java.lang.String normalizeNetworkLocationPath(java.lang.String arg0);
    boolean isOnSameRack(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
    <T> void sortByDistance(org.apache.hadoop.net.Node arg0, T[] arg1, int arg2, java.util.function.Consumer<java.util.List<T>> arg3);
    void sortByDistance(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node[] arg1, int arg2);
    boolean hasClusterEverBeenMultiRack();
    org.apache.hadoop.net.Node chooseRandom(java.lang.String arg0, java.lang.String arg1, java.util.Collection<org.apache.hadoop.net.Node> arg2);
    int countNumOfAvailableNodes(java.lang.String arg0, java.util.Collection<org.apache.hadoop.net.Node> arg1);
    org.apache.hadoop.net.Node chooseRandom(org.apache.hadoop.net.InnerNode arg0, org.apache.hadoop.net.Node arg1, java.util.Collection<org.apache.hadoop.net.Node> arg2, int arg3, int arg4);
    java.lang.String getRack(java.lang.String arg0);
    <T> void sortByDistanceUsingNetworkLocation(org.apache.hadoop.net.Node arg0, T[] arg1, int arg2, java.util.function.Consumer<java.util.List<T>> arg3);
    java.lang.String toString();
    java.lang.String getLastHalf(java.lang.String arg0);
    void add(org.apache.hadoop.net.Node arg0);
    void sortByDistanceUsingNetworkLocation(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node[] arg1, int arg2);
    boolean isSameParents(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
    int getNumOfRacks();
    java.util.List<org.apache.hadoop.net.Node> getLeaves(java.lang.String arg0);
    void incrementRacks();
    boolean isNodeGroupAware();
    void setRandomSeed(long arg0);
    void decommissionNode(org.apache.hadoop.net.Node arg0);
    <T> void sortByDistance(org.apache.hadoop.net.Node arg0, T[] arg1, int arg2, java.util.function.Consumer<java.util.List<T>> arg3, boolean arg4);
    java.util.List<org.apache.hadoop.net.Node> getDatanodesInRack(java.lang.String arg0);
    int getDistanceByPath(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
    int getWeight(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
    int getDistance(org.apache.hadoop.net.Node arg0, org.apache.hadoop.net.Node arg1);
}