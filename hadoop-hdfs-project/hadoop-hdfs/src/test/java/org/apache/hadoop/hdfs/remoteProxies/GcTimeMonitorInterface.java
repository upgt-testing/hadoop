package org.apache.hadoop.hdfs.remoteProxies;

public interface GcTimeMonitorInterface {
    void stop0(java.lang.Object arg0);
    void join(long arg0, int arg1) throws java.lang.InterruptedException;
    int getPriority();
    void join() throws java.lang.InterruptedException;
    void suspend();
    boolean holdsLock(java.lang.Object arg0);
    void suspend0();
    void run();
    void interrupt0();
    long getId();
    void start();
    boolean isAlive();
    boolean isDaemon();
    java.util.Map<java.lang.Thread, java.lang.StackTraceElement[]> getAllStackTraces();
    void stop();
    int enumerate(java.lang.Thread[] arg0);
    void sleep(long arg0, int arg1) throws java.lang.InterruptedException;
    void setPriority(int arg0);
    void dispatchUncaughtException(java.lang.Throwable arg0);
    void yield();
    boolean isCCLOverridden(java.lang.Class<?> arg0);
    void setName(java.lang.String arg0);
    int nextThreadNum();
    void setContextClassLoader(java.lang.ClassLoader arg0);
    boolean isInterrupted();
    void processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>> arg0, java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>, ?> arg1);
    void shutdown();
    java.lang.ClassLoader getContextClassLoader();
    void onSpinWait();
    void start0();
    java.lang.String getName();
    java.lang.ThreadGroup getThreadGroup();
    void resume0();
    java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    void blockedOn(sun.nio.ch.Interruptible arg0);
    void sleep(long arg0) throws java.lang.InterruptedException;
    boolean auditSubclass(java.lang.Class<?> arg0);
    long nextThreadID();
    java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[] arg0);
    GcDataInterface getLatestGcData();
    void setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler arg0);
    java.lang.Thread currentThread();
    void calculateGCTimePercentageWithinObservedInterval();
    void resume();
    int activeCount();
    void setDaemon(boolean arg0);
    java.lang.Thread[] getThreads();
    java.lang.String toString();
    int countStackFrames();
    void interrupt();
    boolean interrupted();
    void setPriority0(int arg0);
    void setNativeName(java.lang.String arg0);
    java.lang.Thread.UncaughtExceptionHandler getUncaughtExceptionHandler();
    void dumpStack();
    java.lang.StackTraceElement[] getStackTrace();
    void exit();
    java.lang.Thread.State getState();
    void join(long arg0) throws java.lang.InterruptedException;
    void setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler arg0);
    void registerNatives();
    void checkAccess();
    boolean isInterrupted(boolean arg0);
    java.lang.Thread.UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
}