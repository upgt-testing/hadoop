package org.apache.hadoop.hdfs.remoteProxies;

public interface ImmutableListInterface<E> {
    java.util.ListIterator<E> listIterator(int arg0);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4);
    E set(int arg0, E arg1);
    java.util.stream.Stream<E> stream();
//    java.util.Iterator<T> iterator();
//    java.util.Spliterator<T> spliterator();
    <E> java.util.stream.Collector<E, ?, org.apache.hadoop.thirdparty.com.google.common.collect.ImmutableList<E>> toImmutableList();
    java.util.Iterator<E> iterator();
    <E> java.util.List<E> of(E arg0);
    boolean equals(java.lang.Object arg0);
    boolean removeIf(java.util.function.Predicate<? super E> arg0);
    ImmutableListInterface<E> subList(int arg0, int arg1);
    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8, E arg9, E arg10, E arg11, E... arg12);
    boolean contains(java.lang.Object arg0);
    int hugeCapacity(int arg0);
    java.util.stream.Stream<E> parallelStream();
//    UnmodifiableIteratorInterface<E> iterator();
    void add(int arg0, E arg1);
    ImmutableListInterface<E> subListUnchecked(int arg0, int arg1);
    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5);
    int hashCode();
//    UnmodifiableListIteratorInterface<E> listIterator(int arg0);
    <E> ImmutableListInterface<E> copyOf(java.lang.Iterable<? extends E> arg0);
    int lastIndexOf(java.lang.Object arg0);
    <T> T[] finishToArray(T[] arg0, java.util.Iterator<?> arg1);
    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6);
    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8, E arg9);
    <E> ImmutableListInterface<E> of(E arg0, E arg1);
//    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4);
    boolean addAll(int arg0, java.util.Collection<? extends E> arg1);
    java.lang.Object[] toArray();
    int copyIntoArray(java.lang.Object[] arg0, int arg1);
    java.lang.Object[] internalArray();
    <E> ImmutableListInterface<E> copyOf(E[] arg0);
//    <E> java.util.List<E> of(E arg0, E arg1);
    void readObject(java.io.ObjectInputStream arg0) throws java.io.InvalidObjectException;
    boolean addAll(java.util.Collection<? extends E> arg0);
    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3);
//    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5);
    <T> T[] toArray(T[] arg0);
    <E> ImmutableListInterface<E> sortedCopyOf(java.util.Comparator<? super E> arg0, java.lang.Iterable<? extends E> arg1);
    boolean remove(java.lang.Object arg0);
    <E> java.util.List<E> of();
    java.util.ListIterator<E> listIterator();
    ImmutableListInterface<E> reverse();
    int internalArrayStart();
    ImmutableListInterface<E> asList();
    <E> ImmutableListInterface<E> sortedCopyOf(java.lang.Iterable<? extends E> arg0);
//    <E> ImmutableListInterface<E> of();
    java.util.Spliterator<E> spliterator();
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8);
    boolean retainAll(java.util.Collection<?> arg0);
//    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6);
    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7);
    void replaceAll(java.util.function.UnaryOperator<E> arg0);
    boolean isPartialView();
//    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3);
    void sort(java.util.Comparator<? super E> arg0);
//    <E> java.util.List<E> of(E arg0, E arg1, E arg2);
    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8, E arg9, E arg10);
    <E> ImmutableListInterface<E> copyOf(java.util.Collection<? extends E> arg0);
    E get(int arg0);
//    <E> BuilderInterface<E> builderWithExpectedSize(int arg0);
    <E> ImmutableListInterface<E> construct(java.lang.Object... arg0);
    <E> ImmutableListInterface<E> asImmutableList(java.lang.Object[] arg0, int arg1);
    boolean isEmpty();
    java.lang.String toString();
    boolean containsAll(java.util.Collection<?> arg0);
    void clear();
//    java.util.List<E> subList(int arg0, int arg1);
    <E> ImmutableListInterface<E> asImmutableList(java.lang.Object[] arg0);
    int indexOf(java.lang.Object arg0);
//    <E> ImmutableListInterface<E> of(E arg0);
    int size();
//    <E> java.util.List<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8, E arg9);
//    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8);
//    UnmodifiableListIteratorInterface<E> listIterator();
//    <E> BuilderInterface<E> builder();
    void forEach(java.util.function.Consumer<? super E> arg0);
    <E> java.util.List<E> of(E... arg0);
    E remove(int arg0);
    int internalArrayEnd();
    <T> T[] toArray(java.util.function.IntFunction<T[]> arg0);
//    <E> java.util.List<E> copyOf(java.util.Collection<? extends E> arg0);
    java.lang.Object writeReplace();
    <E> ImmutableListInterface<E> copyOf(java.util.Iterator<? extends E> arg0);
    boolean removeAll(java.util.Collection<?> arg0);
//    <E> ImmutableListInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7);
    boolean add(E arg0);
}