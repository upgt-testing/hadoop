package org.apache.hadoop.hdfs.remoteProxies;

public interface ClasspathPatternInterface {
//    void forEach(java.util.function.Consumer<? super T> arg0);
//    boolean removeIf(java.util.function.Predicate<? super E> arg0);
    boolean add(java.lang.String arg0);
    boolean equals(java.lang.Object arg0);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7);
    boolean remove(java.lang.Object arg0);
    boolean exclude(java.lang.String arg0);
    <T> T[] finishToArray(T[] arg0, java.util.Iterator<?> arg1);
//    boolean combine(IncludeExcludeSetInterface<org.eclipse.jetty.webapp.ClasspathPattern.Entry, java.lang.String> arg0, java.lang.String arg1, IncludeExcludeSetInterface<org.eclipse.jetty.webapp.ClasspathPattern.Entry, java.net.URI> arg2, java.util.function.Supplier<java.net.URI> arg3);
    int size();
//    java.util.Spliterator<T> spliterator();
//    java.util.stream.Stream<E> parallelStream();
    void clear();
    boolean isEmpty();
    void addAll(java.lang.String[] arg0);
    java.lang.String toString();
    boolean containsAll(java.util.Collection<?> arg0);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3, E arg4);
//    java.util.Iterator<T> iterator();
    boolean add(java.lang.String... arg0);
//    java.util.Spliterator<E> spliterator();
    <E> java.util.Set<E> of(E... arg0);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8, E arg9);
    boolean removeAll(java.util.Collection<?> arg0);
    boolean retainAll(java.util.Collection<?> arg0);
    <E> java.util.Set<E> of(E arg0, E arg1);
    java.lang.String[] getPatterns();
    java.util.Iterator<java.lang.String> iterator();
    boolean exclude(java.lang.String... arg0);
    void setAll(java.lang.String[] arg0);
    EntryInterface newEntry(java.lang.String arg0, boolean arg1);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2);
    <E> java.util.Set<E> copyOf(java.util.Collection<? extends E> arg0);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3);
    <E> java.util.Set<E> of(E arg0);
    boolean match(java.lang.String arg0);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6, E arg7, E arg8);
    boolean include(java.lang.String... arg0);
    boolean include(java.lang.String arg0);
    EntryInterface newEntry(java.lang.String arg0);
    java.lang.Object[] toArray();
    boolean contains(java.lang.Object arg0);
    <E> java.util.Set<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E arg6);
//    java.util.stream.Stream<E> stream();
    boolean add(EntryInterface arg0);
    int hugeCapacity(int arg0);
    <T> T[] toArray(T[] arg0);
    <T> T[] toArray(java.util.function.IntFunction<T[]> arg0);
//    boolean addAll(java.util.Collection<? extends E> arg0);
    <E> java.util.Set<E> of();
    int hashCode();
    boolean match(java.lang.Class<?> arg0);
    boolean match(java.lang.String arg0, java.net.URL arg1);
//    java.util.Iterator<E> iterator();
}