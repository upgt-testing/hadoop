package org.apache.hadoop.hdfs.remoteProxies;

public interface HttpOutputInterface {
    void println(boolean arg0) throws java.io.IOException;
    void flush() throws java.io.IOException;
    boolean updateApiState(java.lang.Throwable arg0);
    HttpChannelInterface getHttpChannel();
    void sendContent(java.nio.channels.ReadableByteChannel arg0) throws java.io.IOException;
    void checkWritable() throws org.eclipse.jetty.io.EofException;
    void print(int arg0) throws java.io.IOException;
    void completed(java.lang.Throwable arg0);
    java.nio.ByteBuffer getBuffer();
    void println(double arg0) throws java.io.IOException;
    boolean isAsync();
    void sendContent(org.eclipse.jetty.http.HttpContent arg0, org.eclipse.jetty.util.Callback arg1);
    void onWriteComplete(boolean arg0, java.lang.Throwable arg1);
    boolean isReady();
    void print(boolean arg0) throws java.io.IOException;
    boolean isClosed();
    void channelWrite(java.nio.ByteBuffer arg0, boolean arg1) throws java.io.IOException;
    void write(byte[] arg0) throws java.io.IOException;
    void recycle();
    int maximizeAggregateSpace();
    void setWriteListener(javax.servlet.WriteListener arg0);
    void run();
    void write(java.nio.ByteBuffer arg0) throws java.io.IOException;
    void onFlushed(long arg0) throws java.io.IOException;
    void sendContent(java.io.InputStream arg0) throws java.io.IOException;
    void print(java.lang.String arg0) throws java.io.IOException;
    void write(int arg0) throws java.io.IOException;
    void print(float arg0) throws java.io.IOException;
    void println(java.lang.String arg0) throws java.io.IOException;
    void println(float arg0) throws java.io.IOException;
    void setBufferSize(int arg0);
    void reopen();
    void println(int arg0) throws java.io.IOException;
    java.lang.String toString();
    void softClose();
    void resetBuffer();
    boolean isWritten();
    void close() throws java.io.IOException;
    void sendContent(java.io.InputStream arg0, org.eclipse.jetty.util.Callback arg1);
    org.eclipse.jetty.server.HttpOutput.Interceptor getInterceptor();
    void sendContent(java.nio.ByteBuffer arg0, org.eclipse.jetty.util.Callback arg1);
    void print(double arg0) throws java.io.IOException;
    void println(long arg0) throws java.io.IOException;
    void println(char arg0) throws java.io.IOException;
    void sendContent(java.nio.channels.ReadableByteChannel arg0, org.eclipse.jetty.util.Callback arg1);
    void print(long arg0) throws java.io.IOException;
    java.lang.String stateString();
    void print(char arg0) throws java.io.IOException;
    void println() throws java.io.IOException;
    void channelWrite(java.nio.ByteBuffer arg0, boolean arg1, org.eclipse.jetty.util.Callback arg2);
    void complete(org.eclipse.jetty.util.Callback arg0);
    void sendContent(org.eclipse.jetty.http.HttpContent arg0) throws java.io.IOException;
    boolean prepareSendContent(int arg0, org.eclipse.jetty.util.Callback arg1);
    void print(java.lang.String arg0, boolean arg1) throws java.io.IOException;
    long getWritten();
    BlockerInterface acquireWriteBlockingCallback() throws java.io.IOException;
    int getBufferSize();
    void setInterceptor(org.eclipse.jetty.server.HttpOutput.Interceptor arg0);
    java.io.OutputStream nullOutputStream();
    void releaseBuffer(java.lang.Throwable arg0);
    void sendContent(java.nio.ByteBuffer arg0) throws java.io.IOException;
    java.nio.ByteBuffer acquireBuffer();
    void write(byte[] arg0, int arg1, int arg2) throws java.io.IOException;
}