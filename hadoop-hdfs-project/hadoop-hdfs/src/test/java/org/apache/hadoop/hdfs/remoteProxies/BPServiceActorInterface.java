package org.apache.hadoop.hdfs.remoteProxies;

public interface BPServiceActorInterface {
    java.lang.String getNameNodeAddress();
    void cleanUp();
    long generateUniqueBlockReportId();
    void join();
    java.net.InetSocketAddress getNNSocketAddress();
    boolean isAlive();
    void triggerBlockReportForTests();
    DatanodeRegistrationInterface getBpRegistration();
    IncrementalBlockReportManagerInterface getIbrManager();
    java.lang.String getRunningState();
    void offerService() throws java.lang.Exception;
    void stopCommandProcessingThread();
    void sendLifelineForTests() throws java.io.IOException;
    void sleepAfterException();
    void triggerBlockReport(BlockReportOptionsInterface arg0);
    HeartbeatResponseInterface sendHeartBeat(boolean arg0) throws java.io.IOException;
    boolean shouldRun();
    DatanodeProtocolClientSideTranslatorPBInterface getNameNodeProxy();
    void triggerHeartbeatForTests();
    java.lang.String formatThreadName(java.lang.String arg0, java.net.InetSocketAddress arg1);
    void register(NamespaceInfoInterface arg0) throws java.io.IOException;
    java.lang.String toString();
    void processQueueMessages();
    void start();
    java.lang.String getRpcMetricSuffix();
    void bpThreadEnqueue(org.apache.hadoop.hdfs.server.datanode.BPServiceActorAction arg0);
    void reRegister() throws java.io.IOException;
    int getMaxBlockReportSize();
    void setLifelineNameNode(DatanodeLifelineProtocolClientSideTranslatorPBInterface arg0);
    void run();
    DatanodeLifelineProtocolClientSideTranslatorPBInterface getLifelineNameNodeProxy();
    java.util.Map<java.lang.String, java.lang.String> getActorInfoMap();
    boolean shouldRetryInit();
    void setNameNode(DatanodeProtocolClientSideTranslatorPBInterface arg0);
    void sleepAndLogInterrupts(int arg0, java.lang.String arg1);
    void reportRemoteBadBlock(DatanodeInfoInterface arg0, ExtendedBlockInterface arg1) throws java.io.IOException;
    DatanodeCommandInterface cacheReport() throws java.io.IOException;
    int calculateBlockReportPBSize(boolean arg0, org.apache.hadoop.hdfs.server.protocol.StorageBlockReport[] arg1);
    void checkNNVersion(NamespaceInfoInterface arg0) throws org.apache.hadoop.hdfs.server.common.IncorrectVersionException;
    void stop();
    java.util.List<org.apache.hadoop.hdfs.server.protocol.DatanodeCommand> blockReport(long arg0) throws java.io.IOException;
    void connectToNNAndHandshake() throws java.io.IOException;
    NamespaceInfoInterface retrieveNamespaceInfo() throws java.io.IOException;
    void handleRollingUpgradeStatus(HeartbeatResponseInterface arg0) throws java.io.IOException;
    SchedulerInterface getScheduler();
}