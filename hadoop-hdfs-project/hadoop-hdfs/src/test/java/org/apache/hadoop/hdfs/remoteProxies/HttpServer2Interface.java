package org.apache.hadoop.hdfs.remoteProxies;

public interface HttpServer2Interface {
    FilterHolderInterface getFilterHolder(java.lang.String arg0, java.lang.String arg1, java.util.Map<java.lang.String, java.lang.String> arg2);
    boolean isInstrumentationAccessAllowed(javax.servlet.ServletContext arg0, javax.servlet.http.HttpServletRequest arg1, javax.servlet.http.HttpServletResponse arg2) throws java.io.IOException;
    void addInternalServlet(java.lang.String arg0, java.lang.String arg1, java.lang.Class<? extends javax.servlet.http.HttpServlet> arg2);
    void addFilterPathMapping(java.lang.String arg0, ServletContextHandlerInterface arg1);
    void addInternalServlet(java.lang.String arg0, java.lang.String arg1, java.lang.Class<? extends javax.servlet.http.HttpServlet> arg2, boolean arg3);
    void addFilter(java.lang.String arg0, java.lang.String arg1, java.util.Map<java.lang.String, java.lang.String> arg2);
    WebAppContextInterface getWebAppContext();
    void addContext(ServletContextHandlerInterface arg0, boolean arg1);
    void defineFilter(ServletContextHandlerInterface arg0, FilterHolderInterface arg1, FilterMappingInterface arg2);
    void loadListeners();
    void addInternalServlet(java.lang.String arg0, java.lang.String arg1, java.lang.Class<? extends javax.servlet.http.HttpServlet> arg2, java.util.Map<java.lang.String, java.lang.String> arg3);
    MultiExceptionInterface addMultiException(MultiExceptionInterface arg0, java.lang.Exception arg1);
    java.util.Properties getFilterProperties(ConfigurationInterface arg0, java.lang.String arg1);
    void addJerseyResourcePackage(java.lang.String arg0, java.lang.String arg1, java.util.Map<java.lang.String, java.lang.String> arg2);
    int getPort();
    java.lang.String toString();
    boolean userHasAdministratorAccess(javax.servlet.ServletContext arg0, java.lang.String arg1);
    java.net.InetSocketAddress getConnectorAddress(int arg0);
    boolean hasAdministratorAccess(javax.servlet.ServletContext arg0, javax.servlet.http.HttpServletRequest arg1, javax.servlet.http.HttpServletResponse arg2) throws java.io.IOException;
    boolean isAlive();
    void addPrometheusServlet(ConfigurationInterface arg0);
    void bindListener(ServerConnectorInterface arg0) throws java.lang.Exception;
    void stop() throws java.lang.Exception;
    void addGlobalFilter(java.lang.String arg0, java.lang.String arg1, java.util.Map<java.lang.String, java.lang.String> arg2);
    void setAttribute(java.lang.String arg0, java.lang.Object arg1);
    void addNoCacheFilter(ServletContextHandlerInterface arg0);
    void initSpnego(ConfigurationInterface arg0, java.lang.String arg1, java.lang.String arg2, java.lang.String arg3) throws java.io.IOException;
    void addListener(ServerConnectorInterface arg0);
    void bindForSinglePort(ServerConnectorInterface arg0, int arg1) throws java.lang.Exception;
    java.lang.Object getAttribute(java.lang.String arg0);
    void addHandlerAtFront(org.eclipse.jetty.server.Handler arg0);
    void addDefaultApps(ContextHandlerCollectionInterface arg0, java.lang.String arg1, ConfigurationInterface arg2) throws java.io.IOException;
    void setThreads(int arg0, int arg1);
    WebAppContextInterface createWebAppContext(BuilderInterface arg0, AccessControlListInterface arg1, java.lang.String arg2);
    void addServlet(java.lang.String arg0, java.lang.String arg1, java.lang.Class<? extends javax.servlet.http.HttpServlet> arg2);
    void addHandlerAtEnd(org.eclipse.jetty.server.Handler arg0);
    java.util.Map<java.lang.String, java.lang.String> getDefaultHeaders();
    void join() throws java.lang.InterruptedException;
    void start() throws java.io.IOException;
    java.net.BindException constructBindException(ServerConnectorInterface arg0, java.io.IOException arg1);
    void openListeners() throws java.lang.Exception;
    void defineFilter(ServletContextHandlerInterface arg0, java.lang.String arg1, java.lang.String arg2, java.util.Map<java.lang.String, java.lang.String> arg3, java.lang.String[] arg4);
    void addDefaultServlets();
    SignerSecretProviderInterface constructSecretProvider(BuilderInterface arg0, javax.servlet.ServletContext arg1) throws java.lang.Exception;
    void setContextAttributes(ServletContextHandlerInterface arg0, ConfigurationInterface arg1);
    void addJerseyResourcePackage(java.lang.String arg0, java.lang.String arg1);
    java.util.Map<java.lang.String, java.lang.String> setHeaders(ConfigurationInterface arg0);
    FilterMappingInterface getFilterMapping(java.lang.String arg0, java.lang.String[] arg1);
    void initializeWebServer(java.lang.String arg0, java.lang.String arg1, ConfigurationInterface arg2, java.lang.String[] arg3) throws java.io.IOException;
    FilterInitializerInterface[] getFilterInitializers(ConfigurationInterface arg0);
    java.lang.String getWebAppsPath(java.lang.String arg0) throws java.io.FileNotFoundException;
    void bindForPortRange(ServerConnectorInterface arg0, int arg1) throws java.lang.Exception;
}