package org.apache.hadoop.hdfs.remoteProxies;

public interface ServletHandlerInterface {
    ServletContextHandlerInterface getServletContextHandler();
    void updateBeans(java.lang.Object[] arg0, java.lang.Object[] arg1);
    void manage(java.lang.Object arg0);
    boolean isUnmanaged(java.lang.Object arg0);
    void setFilterMappings(FilterMappingInterface[] arg0);
    void removeEventListener(org.eclipse.jetty.util.component.Container.Listener arg0);
    BeanInterface getBean(java.lang.Object arg0);
    void doScope(java.lang.String arg0, RequestInterface arg1, javax.servlet.http.HttpServletRequest arg2, javax.servlet.http.HttpServletResponse arg3) throws java.io.IOException, javax.servlet.ServletException;
    void dumpObject(java.lang.Appendable arg0, java.lang.Object arg1) throws java.io.IOException;
    void addFilter(FilterHolderInterface arg0);
    boolean remove(BeanInterface arg0);
    void start(org.eclipse.jetty.util.component.LifeCycle arg0) throws java.lang.Exception;
    java.lang.String getState(org.eclipse.jetty.util.component.LifeCycle arg0);
    org.eclipse.jetty.util.component.Dumpable named(java.lang.String arg0, java.lang.Object arg1);
    javax.servlet.FilterChain getFilterChain(RequestInterface arg0, java.lang.String arg1, ServletHolderInterface arg2);
    ServletHolderInterface[] getServlets();
    void setListeners(org.eclipse.jetty.servlet.ListenerHolder[] arg0);
    MatchedResourceInterface<org.eclipse.jetty.servlet.ServletHolder> getMatchedServlet(java.lang.String arg0);
    org.eclipse.jetty.server.Handler[] getChildHandlers();
    void doError(java.lang.String arg0, RequestInterface arg1, javax.servlet.http.HttpServletRequest arg2, javax.servlet.http.HttpServletResponse arg3) throws java.io.IOException, javax.servlet.ServletException;
    boolean containsServletHolder(ServletHolderInterface arg0);
    ServletMappingInterface[] getServletMappings();
    boolean isInitialized();
    <T> T getBean(java.lang.Class<T> arg0);
    void expandHandler(org.eclipse.jetty.server.Handler arg0, java.util.List<org.eclipse.jetty.server.Handler> arg1, java.lang.Class<?> arg2);
    void dumpObjects(java.lang.Appendable arg0, java.lang.String arg1, java.lang.Object arg2, java.lang.Object... arg3) throws java.io.IOException;
    void addServletMapping(ServletMappingInterface arg0);
    FilterHolderInterface newFilterHolder(SourceInterface arg0);
    void updateBean(java.lang.Object arg0, java.lang.Object arg1, boolean arg2);
    boolean isAvailable();
    void doStart() throws java.lang.Exception;
    void dumpMapEntries(java.lang.Appendable arg0, java.lang.String arg1, java.util.Map<?, ?> arg2, boolean arg3) throws java.io.IOException;
    boolean isEnsureDefaultServlet();
    void destroyFilter(javax.servlet.Filter arg0);
    boolean addBean(java.lang.Object arg0, boolean arg1);
    void nextHandle(java.lang.String arg0, RequestInterface arg1, javax.servlet.http.HttpServletRequest arg2, javax.servlet.http.HttpServletResponse arg3) throws java.io.IOException, javax.servlet.ServletException;
    void dumpStdErr();
    void handle(java.lang.String arg0, RequestInterface arg1, javax.servlet.http.HttpServletRequest arg2, javax.servlet.http.HttpServletResponse arg3) throws java.io.IOException, javax.servlet.ServletException;
    void updateBean(java.lang.Object arg0, java.lang.Object arg1);
    ListenerHolderInterface[] getListeners();
    org.eclipse.jetty.security.IdentityService getIdentityService();
    <T> T getChildHandlerByClass(java.lang.Class<T> arg0);
    void setFailed(java.lang.Throwable arg0);
    void setStopTimeout(long arg0);
    boolean isFailed();
    void addServlet(ServletHolderInterface arg0);
    void unmanage(java.lang.Object arg0);
    void setAllowDuplicateMappings(boolean arg0);
    void setFilterChainsCached(boolean arg0);
    org.eclipse.jetty.server.Handler getHandler();
    <T> java.util.Collection<T> getContainedBeans(java.lang.Class<T> arg0);
    void setStarting();
    boolean isRunning();
    MappedResourceInterface<org.eclipse.jetty.servlet.ServletHolder> getMappedServlet(java.lang.String arg0);
    void setStarted();
    FilterHolderInterface addFilterWithMapping(java.lang.String arg0, java.lang.String arg1, int arg2);
    void dumpObjects(java.lang.Appendable arg0, java.lang.String arg1, java.lang.Object... arg2) throws java.io.IOException;
    void updateNameMappings();
    void setBeans(java.util.Collection<java.lang.Object> arg0);
    void destroy();
    ServletHolderInterface getServlet(java.lang.String arg0);
    java.lang.String toString();
    void addLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle.Listener arg0);
    ServletHolderInterface newServletHolder(SourceInterface arg0);
    java.lang.String dumpSelf();
    void setMaxFilterChainsCacheSize(int arg0);
    void stop(org.eclipse.jetty.util.component.LifeCycle arg0) throws java.lang.Exception;
    boolean isAuto(java.lang.Object arg0);
    void nextScope(java.lang.String arg0, RequestInterface arg1, javax.servlet.http.HttpServletRequest arg2, javax.servlet.http.HttpServletResponse arg3) throws java.io.IOException, javax.servlet.ServletException;
    java.lang.String dump(org.eclipse.jetty.util.component.Dumpable arg0);
    void addListener(ListenerHolderInterface arg0);
//    boolean addBean(java.lang.Object arg0, org.eclipse.jetty.util.component.ContainerLifeCycle.Managed arg1);
    void removeLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle.Listener arg0);
    boolean isStarting();
    void setServletMappings(ServletMappingInterface[] arg0);
    void setServlets(ServletHolderInterface[] arg0);
    void dump(java.lang.Appendable arg0, java.lang.String arg1, java.util.Collection<?>... arg2) throws java.io.IOException;
    org.eclipse.jetty.server.Handler[] getChildHandlersByClass(java.lang.Class<?> arg0);
    void unmanage(BeanInterface arg0);
    int getMaxFilterChainsCacheSize();
    void setStopping();
    void setFilters(FilterHolderInterface[] arg0);
    void updateMappings();
    boolean isFilterChainsCached();
    FilterMappingInterface[] insertFilterMapping(FilterMappingInterface arg0, int arg1, boolean arg2);
    javax.servlet.FilterChain newFilterChain(FilterHolderInterface arg0, javax.servlet.FilterChain arg1);
    void setStartWithUnavailable(boolean arg0);
    java.util.Set<java.lang.String> setServletSecurity(javax.servlet.ServletRegistration.Dynamic arg0, ServletSecurityElementInterface arg1);
    void start(java.lang.Object arg0);
    void invalidateChainsCache();
    boolean isStopped();
    void dumpIterable(java.lang.Appendable arg0, java.lang.String arg1, java.lang.Iterable<?> arg2, boolean arg3) throws java.io.IOException;
    FilterHolderInterface addFilter(java.lang.String arg0, java.lang.String arg1, java.util.EnumSet<javax.servlet.DispatcherType> arg2);
    javax.servlet.ServletContext getServletContext();
    ServletMappingInterface getServletMapping(java.lang.String arg0);
    void addFilterWithMapping(FilterHolderInterface arg0, java.lang.String arg1, int arg2);
    void initializeHolders(org.eclipse.jetty.servlet.BaseHolder<?>[] arg0);
    void setStopped();
    boolean removeBean(java.lang.Object arg0);
    ListenerHolderInterface newListenerHolder(SourceInterface arg0);
    void doStop() throws java.lang.Exception;
    FilterMappingInterface[] getFilterMappings();
    <T> void getContainedBeans(java.lang.Class<T> arg0, java.util.Collection<T> arg1);
    void removeBeans();
    boolean isManaged(java.lang.Object arg0);
    void destroyServlet(javax.servlet.Servlet arg0);
    boolean addBean(java.lang.Object arg0);
    boolean isDumpable(java.lang.Object arg0);
    java.lang.String dump();
    FilterHolderInterface addFilterWithMapping(java.lang.String arg0, java.lang.String arg1, java.util.EnumSet<javax.servlet.DispatcherType> arg2);
    java.util.List<org.eclipse.jetty.servlet.ServletHolder> getServlets(java.lang.Class<?> arg0);
    void expandChildren(java.util.List<org.eclipse.jetty.server.Handler> arg0, java.lang.Class<?> arg1);
    <T> T findContainerOf(org.eclipse.jetty.server.HandlerContainer arg0, java.lang.Class<T> arg1, org.eclipse.jetty.server.Handler arg2);
    boolean isStopping();
    void addFilter(FilterHolderInterface arg0, FilterMappingInterface arg1);
    void setEnsureDefaultServlet(boolean arg0);
    FilterHolderInterface addFilterWithMapping(java.lang.Class<? extends javax.servlet.Filter> arg0, java.lang.String arg1, java.util.EnumSet<javax.servlet.DispatcherType> arg2);
    org.eclipse.jetty.server.Handler[] getHandlers();
    void stop(java.lang.Object arg0);
    void initialize() throws java.lang.Exception;
    void lambda$named$0(java.lang.String arg0, java.lang.Object arg1, java.lang.Appendable arg2, java.lang.String arg3) throws java.io.IOException;
    void dump(java.lang.Appendable arg0, java.lang.String arg1) throws java.io.IOException;
    org.eclipse.jetty.http.pathmap.PathSpec asPathSpec(java.lang.String arg0);
    void destroyListener(java.util.EventListener arg0);
    ServletHolderInterface addServletWithMapping(java.lang.Class<? extends javax.servlet.Servlet> arg0, java.lang.String arg1);
    void dump(java.lang.Appendable arg0) throws java.io.IOException;
    void setHandler(org.eclipse.jetty.server.Handler arg0);
    boolean contains(java.lang.Object arg0);
    void doShutdown(java.util.List<java.util.concurrent.Future<java.lang.Void>> arg0) throws org.eclipse.jetty.util.MultiException;
    void dumpThis(java.lang.Appendable arg0) throws java.io.IOException;
    void stop() throws java.lang.Exception;
    FilterHolderInterface addFilterWithMapping(java.lang.Class<? extends javax.servlet.Filter> arg0, java.lang.String arg1, int arg2);
    ServerInterface getServer();
    FilterHolderInterface getFilter(java.lang.String arg0);
    void addManaged(org.eclipse.jetty.util.component.LifeCycle arg0);
    FilterHolderInterface[] getFilters();
    boolean isStartWithUnavailable();
    void insertHandler(HandlerWrapperInterface arg0);
    void setServer(ServerInterface arg0);
    java.util.Collection<java.lang.Object> getBeans();
    void addEventListener(org.eclipse.jetty.util.component.Container.Listener arg0);
    void dumpContainer(java.lang.Appendable arg0, java.lang.String arg1, org.eclipse.jetty.util.component.Container arg2, boolean arg3) throws java.io.IOException;
    void dumpBeans(java.lang.Appendable arg0, java.lang.String arg1, java.util.Collection<?>... arg2) throws java.io.IOException;
    boolean isAllowDuplicateMappings();
    void prependFilterMapping(FilterMappingInterface arg0);
    ServletHolderInterface addServletWithMapping(java.lang.String arg0, java.lang.String arg1);
    void start() throws java.lang.Exception;
    boolean isStarted();
    void addFilterWithMapping(FilterHolderInterface arg0, java.lang.String arg1, java.util.EnumSet<javax.servlet.DispatcherType> arg2);
    void manage(BeanInterface arg0);
    java.lang.String getState();
    boolean containsFilterHolder(FilterHolderInterface arg0);
    MappedResourceInterface<org.eclipse.jetty.servlet.ServletHolder> getHolderEntry(java.lang.String arg0);
    void addServletWithMapping(ServletHolderInterface arg0, java.lang.String arg1);
    void doHandle(java.lang.String arg0, RequestInterface arg1, javax.servlet.http.HttpServletRequest arg2, javax.servlet.http.HttpServletResponse arg3) throws java.io.IOException, javax.servlet.ServletException;
    <T> java.util.Collection<T> getBeans(java.lang.Class<T> arg0);
    void notFound(RequestInterface arg0, javax.servlet.http.HttpServletRequest arg1, javax.servlet.http.HttpServletResponse arg2) throws java.io.IOException, javax.servlet.ServletException;
    void addFilterMapping(FilterMappingInterface arg0);
    long getStopTimeout();
}