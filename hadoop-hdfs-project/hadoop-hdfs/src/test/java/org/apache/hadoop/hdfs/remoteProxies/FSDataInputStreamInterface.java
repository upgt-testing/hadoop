package org.apache.hadoop.hdfs.remoteProxies;

public interface FSDataInputStreamInterface {
    boolean seekToNewSource(long arg0) throws java.io.IOException;
    int maxReadSizeForVectorReads();
    boolean readBoolean() throws java.io.IOException;
    int readInt() throws java.io.IOException;
    int read() throws java.io.IOException;
    long readLong() throws java.io.IOException;
    int read(java.nio.ByteBuffer arg0) throws java.io.IOException;
    int read(byte[] arg0) throws java.io.IOException;
    void readFully(byte[] arg0) throws java.io.IOException;
    boolean hasCapability(java.lang.String arg0);
    void readFully(long arg0, java.nio.ByteBuffer arg1) throws java.io.IOException;
    java.lang.String readLine() throws java.io.IOException;
    int readUnsignedByte() throws java.io.IOException;
    int skipBytes(int arg0) throws java.io.IOException;
    void readFully(long arg0, byte[] arg1, int arg2, int arg3) throws java.io.IOException;
    java.lang.String readUTF() throws java.io.IOException;
    void close() throws java.io.IOException;
    byte[] readAllBytes() throws java.io.IOException;
    int available() throws java.io.IOException;
    java.lang.String toString();
    double readDouble() throws java.io.IOException;
    java.io.FileDescriptor getFileDescriptor() throws java.io.IOException;
    org.apache.hadoop.fs.statistics.IOStatistics getIOStatistics();
    void releaseBuffer(java.nio.ByteBuffer arg0);
    char readChar() throws java.io.IOException;
    void reset() throws java.io.IOException;
    byte[] readNBytes(int arg0) throws java.io.IOException;
    void readVectored(java.util.List<? extends org.apache.hadoop.fs.FileRange> arg0, java.util.function.IntFunction<java.nio.ByteBuffer> arg1) throws java.io.IOException;
    float readFloat() throws java.io.IOException;
    int readUnsignedShort() throws java.io.IOException;
    boolean markSupported();
    long transferTo(java.io.OutputStream arg0) throws java.io.IOException;
    java.nio.ByteBuffer read(org.apache.hadoop.io.ByteBufferPool arg0, int arg1, java.util.EnumSet<org.apache.hadoop.fs.ReadOption> arg2) throws java.io.IOException, java.lang.UnsupportedOperationException;
    void readFully(byte[] arg0, int arg1, int arg2) throws java.io.IOException;
    long skip(long arg0) throws java.io.IOException;
    void seek(long arg0) throws java.io.IOException;
    java.io.InputStream nullInputStream();
    int read(long arg0, byte[] arg1, int arg2, int arg3) throws java.io.IOException;
    void unbuffer();
    java.io.InputStream getWrappedStream();
    int minSeekForVectorReads();
    byte readByte() throws java.io.IOException;
    long getPos() throws java.io.IOException;
    int read(byte[] arg0, int arg1, int arg2) throws java.io.IOException;
    void readFully(long arg0, byte[] arg1) throws java.io.IOException;
    java.lang.String readUTF(java.io.DataInput arg0) throws java.io.IOException;
    int readNBytes(byte[] arg0, int arg1, int arg2) throws java.io.IOException;
    int read(long arg0, java.nio.ByteBuffer arg1) throws java.io.IOException;
    void setReadahead(java.lang.Long arg0) throws java.io.IOException, java.lang.UnsupportedOperationException;
    java.nio.ByteBuffer read(org.apache.hadoop.io.ByteBufferPool arg0, int arg1) throws java.io.IOException, java.lang.UnsupportedOperationException;
    void mark(int arg0);
    short readShort() throws java.io.IOException;
    void setDropBehind(java.lang.Boolean arg0) throws java.io.IOException, java.lang.UnsupportedOperationException;
}