package org.apache.hadoop.hdfs.remoteProxies;

public interface DelegationTokenSecretManagerInterface {
    void updatePersistedMasterKey(DelegationKeyInterface arg0) throws java.io.IOException;
//    void storeNewToken(TokenIdent arg0, long arg1) throws java.io.IOException;
    void updatePersistedTokenCancellation(DelegationTokenIdentifierInterface arg0) throws java.io.IOException;
    void startThreads() throws java.io.IOException;
    void loadSecretManagerState(SecretManagerStateInterface arg0, org.apache.hadoop.hdfs.server.namenode.startupprogress.StartupProgress.Counter arg1) throws java.io.IOException;
    void logUpdateMasterKey(DelegationKeyInterface arg0) throws java.io.IOException;
//    void logExpireTokens(java.util.Collection<TokenIdent> arg0) throws java.io.IOException;
    javax.crypto.SecretKey generateSecret();
//    java.lang.String formatTokenId(TokenIdent arg0);
//    long renewToken(TokenInterface<TokenIdent> arg0, java.lang.String arg1) throws org.apache.hadoop.security.token.SecretManager.InvalidToken, java.io.IOException;
//    TokenIdent cancelToken(TokenInterface<TokenIdent> arg0, java.lang.String arg1) throws java.io.IOException;
    void removeExpiredKeys();
    int getDelegationTokenSeqNum();
//    java.lang.String getTrackingIdIfEnabled(TokenIdent arg0);
//    TokenIdent decodeTokenIdentifier(TokenInterface<TokenIdent> arg0) throws java.io.IOException;
    void updateDelegationKey(DelegationKeyInterface arg0) throws java.io.IOException;
    int getCurrentKeyId();
    void removeStoredMasterKey(DelegationKeyInterface arg0);
    void setDelegationTokenSeqNum(int arg0);
    byte[] retriableRetrievePassword(DelegationTokenIdentifierInterface arg0) throws org.apache.hadoop.security.token.SecretManager.InvalidToken, org.apache.hadoop.ipc.StandbyException, org.apache.hadoop.ipc.RetriableException, java.io.IOException;
    boolean isRunning();
    void loadSecretManagerStateCompat(java.io.DataInput arg0) throws java.io.IOException;
//    void storeToken(TokenIdent arg0, DelegationTokenInformationInterface arg1) throws java.io.IOException;
    byte[] retrievePassword(DelegationTokenIdentifierInterface arg0) throws org.apache.hadoop.security.token.SecretManager.InvalidToken;
//    DelegationTokenInformationInterface getTokenInfo(TokenIdent arg0);
    void setCurrentKeyId(int arg0);
    void stopThreads();
//    DelegationTokenInformationInterface checkToken(TokenIdent arg0) throws org.apache.hadoop.security.token.SecretManager.InvalidToken;
    long getCurrentTokensSize();
    void saveSecretManagerStateCompat(java.io.DataOutputStream arg0, java.lang.String arg1) throws java.io.IOException;
    long getTokenExpiryTime(DelegationTokenIdentifierInterface arg0) throws java.io.IOException;
//    byte[] createPassword(TokenIdent arg0);
    void updateCurrentKey() throws java.io.IOException;
    void checkAvailableForRead() throws org.apache.hadoop.ipc.StandbyException;
    CredentialsInterface createCredentials(NameNodeInterface arg0, UserGroupInformationInterface arg1, java.lang.String arg2) throws java.io.IOException;
    void addPersistedDelegationToken(DelegationTokenIdentifierInterface arg0, long arg1) throws java.io.IOException;
    void storeDelegationKey(DelegationKeyInterface arg0) throws java.io.IOException;
    SecretManagerStateInterface saveSecretManagerState();
    void updatePersistedTokenRenewal(DelegationTokenIdentifierInterface arg0, long arg1) throws java.io.IOException;
    DelegationKeyInterface[] getAllKeys();
    void addKey(DelegationKeyInterface arg0) throws java.io.IOException;
    int getNumberOfKeys();
    DelegationTokenIdentifierInterface createIdentifier();
    void removeExpiredToken() throws java.io.IOException;
    int incrementCurrentKeyId();
//    void updateToken(TokenIdent arg0, DelegationTokenInformationInterface arg1) throws java.io.IOException;
    int incrementDelegationTokenSeqNum();
    void rollMasterKey() throws java.io.IOException;
    javax.crypto.SecretKey createSecretKey(byte[] arg0);
    void logExpireToken(DelegationTokenIdentifierInterface arg0) throws java.io.IOException;
    DelegationTokenSecretManagerMetricsInterface getMetrics();
    byte[] createPassword(byte[] arg0, javax.crypto.SecretKey arg1);
//    void updateStoredToken(TokenIdent arg0, long arg1) throws java.io.IOException;
//    void verifyToken(TokenIdent arg0, byte[] arg1) throws org.apache.hadoop.security.token.SecretManager.InvalidToken;
    void reset();
    DelegationKeyInterface getDelegationKey(int arg0);
    void storeNewMasterKey(DelegationKeyInterface arg0) throws java.io.IOException;
//    void removeStoredToken(TokenIdent arg0) throws java.io.IOException;
//    java.lang.String getTokenTrackingId(TokenIdent arg0);
//    T createIdentifier();
}