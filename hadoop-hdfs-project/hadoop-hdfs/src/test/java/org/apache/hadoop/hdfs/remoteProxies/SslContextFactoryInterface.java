package org.apache.hadoop.hdfs.remoteProxies;

public interface SslContextFactoryInterface {
    java.lang.String[] getSelectedProtocols();
    ResourceInterface getKeyStoreResource();
    long getStopTimeout();
    java.util.Collection<? extends java.security.cert.CRL> loadCRL(java.lang.String arg0) throws java.lang.Exception;
    void setCertAlias(java.lang.String arg0);
    java.lang.String getTrustStoreProvider();
    void setStarted();
    SSLEngineInterface newSSLEngine(java.net.InetSocketAddress arg0);
    java.lang.String getCrlPath();
    void setKeyManagerFactoryAlgorithm(java.lang.String arg0);
    void setSecureRandomAlgorithm(java.lang.String arg0);
    javax.net.ssl.TrustManager[] getTrustManagers(java.security.KeyStore arg0, java.util.Collection<? extends java.security.cert.CRL> arg1) throws java.lang.Exception;
    void setOcspResponderURL(java.lang.String arg0);
    void setIncludeProtocols(java.lang.String... arg0);
    X509ExtendedKeyManagerInterface newSniX509ExtendedKeyManager(X509ExtendedKeyManagerInterface arg0);
    void setNeedClientAuth(boolean arg0);
    java.util.Set<java.lang.String> getAliases();
    void setSslSessionCacheSize(int arg0);
    void setKeyStoreProvider(java.lang.String arg0);
    java.security.KeyStore getTrustStore();
    java.lang.String[] getIncludeCipherSuites();
    SSLEngineInterface newSSLEngine(java.lang.String arg0, int arg1);
    void processIncludeCipherSuites(java.lang.String[] arg0, java.util.List<java.lang.String> arg1);
    int getSslSessionCacheSize();
    boolean isEnableOCSP();
    SSLSocketInterface newSslSocket() throws java.io.IOException;
    void setSessionCachingEnabled(boolean arg0);
    boolean isSessionCachingEnabled();
    java.lang.String getOcspResponderURL();
    void doStop() throws java.lang.Exception;
    void setTrustManagerFactoryAlgorithm(java.lang.String arg0);
    void stop() throws java.lang.Exception;
    java.lang.String getTrustStorePath();
    void checkCiphers(SSLParametersInterface arg0);
    void setEndpointIdentificationAlgorithm(java.lang.String arg0);
    TrustManagerFactoryInterface getTrustManagerFactoryInstance() throws java.security.NoSuchAlgorithmException;
    int deduceKeyLength(java.lang.String arg0);
    void setKeyStore(java.security.KeyStore arg0);
    java.util.Map<java.lang.String, org.eclipse.jetty.util.ssl.X509> aliasCerts();
    java.lang.String getKeyStoreProvider();
    void doStart() throws java.lang.Exception;
    javax.net.ssl.KeyManager[] getKeyManagers(java.security.KeyStore arg0) throws java.lang.Exception;
    void setStopped();
    boolean isStarted();
    void setKeyManagerPassword(java.lang.String arg0);
    void unload();
    java.lang.String[] getExcludeProtocols();
    java.lang.String getProvider();
    boolean isStopping();
    void setStopping();
    ResourceInterface getTrustStoreResource();
    void setValidatePeerCerts(boolean arg0);
    void setFailed(java.lang.Throwable arg0);
    void selectCipherSuites(java.lang.String[] arg0, java.lang.String[] arg1);
    void setExcludeProtocols(java.lang.String... arg0);
    void stop(java.lang.Object arg0);
    int getSslSessionTimeout();
    void reload(java.util.function.Consumer<org.eclipse.jetty.util.ssl.SslContextFactory> arg0) throws java.lang.Exception;
    void dump(java.lang.Appendable arg0, java.lang.String arg1) throws java.io.IOException;
    void setKeyStorePath(java.lang.String arg0);
    java.lang.String getKeyManagerFactoryAlgorithm();
    java.lang.String getCertAlias();
    java.lang.String getTrustStoreType();
    void checkEndPointIdentificationAlgorithm();
    void setEnableCRLDP(boolean arg0);
    java.lang.String dumpSelf();
    SSLContextInterface getSslContext();
    void setRenegotiationAllowed(boolean arg0);
    java.security.cert.PKIXCertPathChecker getPkixCertPathChecker();
    void setIncludeCipherSuites(java.lang.String... arg0);
    void dumpIterable(java.lang.Appendable arg0, java.lang.String arg1, java.lang.Iterable<?> arg2, boolean arg3) throws java.io.IOException;
    void setEnableOCSP(boolean arg0);
    boolean isEnableCRLDP();
    void checkConfiguration();
    boolean getWantClientAuth();
    void setKeyStoreType(java.lang.String arg0);
    void customize(SSLEngineInterface arg0);
    void dumpObjects(java.lang.Appendable arg0, java.lang.String arg1, java.lang.Object arg2, java.lang.Object... arg3) throws java.io.IOException;
    boolean isUseCipherSuitesOrder();
    java.security.KeyStore loadTrustStore(ResourceInterface arg0) throws java.lang.Exception;
    void setMaxCertPathLength(int arg0);
    void setRenegotiationLimit(int arg0);
    java.lang.String toString();
    void setStopTimeout(long arg0);
    boolean isRenegotiationAllowed();
    void setTrustStoreType(java.lang.String arg0);
    void load() throws java.lang.Exception;
    boolean isFailed();
    void setProtocol(java.lang.String arg0);
    java.lang.String getState();
    java.security.cert.X509Certificate[] getX509CertChain(javax.net.ssl.SSLSession arg0);
    void setTrustStore(java.security.KeyStore arg0);
    org.eclipse.jetty.util.component.Dumpable named(java.lang.String arg0, java.lang.Object arg1);
    void addExcludeCipherSuites(java.lang.String... arg0);
    void addExcludeProtocols(java.lang.String... arg0);
    SSLContextInterface getSSLContextInstance() throws java.security.NoSuchAlgorithmException;
    void start(java.lang.Object arg0);
    PasswordInterface getPassword(java.lang.String arg0);
    void start() throws java.lang.Exception;
    SSLEngineInterface newSSLEngine();
    void setCipherComparator(java.util.Comparator<java.lang.String> arg0);
    PasswordInterface newPassword(java.lang.String arg0);
    java.lang.String getKeyStorePath();
    void selectProtocols(java.lang.String[] arg0, java.lang.String[] arg1);
    SSLParametersInterface customize(SSLParametersInterface arg0);
    void checkIsStarted();
    java.security.cert.X509Certificate[] getCertChain(javax.net.ssl.SSLSession arg0);
    int getMaxCertPathLength();
    java.lang.String[] getExcludeCipherSuites();
    void setHostnameVerifier(javax.net.ssl.HostnameVerifier arg0);
    void setTrustStoreProvider(java.lang.String arg0);
    void setPkixCertPathChecker(java.security.cert.PKIXCertPathChecker arg0);
    java.lang.String[] getIncludeProtocols();
    void setProvider(java.lang.String arg0);
    java.security.cert.PKIXBuilderParameters newPKIXBuilderParameters(java.security.KeyStore arg0, java.util.Collection<? extends java.security.cert.CRL> arg1) throws java.lang.Exception;
//    java.util.List<org.eclipse.jetty.util.ssl.SslSelectionDump> selectionDump() throws java.security.NoSuchAlgorithmException;
    void dumpObject(java.lang.Appendable arg0, java.lang.Object arg1) throws java.io.IOException;
    java.security.cert.CertStore getCertStoreInstance(java.util.Collection<? extends java.security.cert.CRL> arg0) throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException;
    void lambda$named$0(java.lang.String arg0, java.lang.Object arg1, java.lang.Appendable arg2, java.lang.String arg3) throws java.io.IOException;
    java.lang.String getKeyStoreType();
    void setWantClientAuth(boolean arg0);
    int getRenegotiationLimit();
    KeyManagerFactoryInterface getKeyManagerFactoryInstance() throws java.security.NoSuchAlgorithmException;
    void setTrustStoreResource(ResourceInterface arg0);
    void setStarting();
    boolean isTrustAll();
    java.util.List<java.lang.String> processIncludeExcludePatterns(java.lang.String arg0, java.lang.String[] arg1, java.lang.String[] arg2, java.util.Set<java.lang.String> arg3, java.util.Set<java.lang.String> arg4);
    void setValidateCerts(boolean arg0);
    java.lang.String getState(org.eclipse.jetty.util.component.LifeCycle arg0);
    java.lang.String[] getSelectedCipherSuites();
    java.util.Comparator<java.lang.String> getCipherComparator();
    void setSslContext(SSLContextInterface arg0);
    boolean isValidateCerts();
    javax.net.ssl.HostnameVerifier getHostnameVerifier();
    void removeLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle.Listener arg0);
    void addLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle.Listener arg0);
    X509Interface getX509(java.lang.String arg0);
    void dumpContainer(java.lang.Appendable arg0, java.lang.String arg1, org.eclipse.jetty.util.component.Container arg2, boolean arg3) throws java.io.IOException;
    boolean getNeedClientAuth();
    void checkTrustAll();
    void setCrlPath(java.lang.String arg0);
    void checkProtocols(SSLParametersInterface arg0);
    boolean isValidatePeerCerts();
    void setKeyStoreResource(ResourceInterface arg0);
    java.security.cert.CertificateFactory getCertificateFactoryInstance(java.lang.String arg0) throws java.security.cert.CertificateException;
    void dumpMapEntries(java.lang.Appendable arg0, java.lang.String arg1, java.util.Map<?, ?> arg2, boolean arg3) throws java.io.IOException;
    java.lang.String getProtocol();
    java.lang.String dump();
    void setTrustAll(boolean arg0);
    java.lang.String getEndpointIdentificationAlgorithm();
    boolean isRunning();
    boolean isStarting();
    java.security.SecureRandom getSecureRandomInstance() throws java.security.NoSuchAlgorithmException;
    void setTrustStorePath(java.lang.String arg0);
    java.lang.String dump(org.eclipse.jetty.util.component.Dumpable arg0);
    java.security.KeyStore loadKeyStore(ResourceInterface arg0) throws java.lang.Exception;
    SSLServerSocketInterface newSslServerSocket(java.lang.String arg0, int arg1, int arg2) throws java.io.IOException;
    java.security.cert.X509Certificate[] getX509CertChain(SslContextFactoryInterface arg0, javax.net.ssl.SSLSession arg1);
    void setUseCipherSuitesOrder(boolean arg0);
    void setKeyStorePassword(java.lang.String arg0);
    java.lang.String getTrustManagerFactoryAlgorithm();
    boolean isStopped();
    void setSslSessionTimeout(int arg0);
    void setExcludeCipherSuites(java.lang.String... arg0);
    void removeExcludedCipherSuites(java.util.List<java.lang.String> arg0);
    java.security.KeyStore getKeyStore();
    java.lang.String getSecureRandomAlgorithm();
    void setTrustStorePassword(java.lang.String arg0);
}