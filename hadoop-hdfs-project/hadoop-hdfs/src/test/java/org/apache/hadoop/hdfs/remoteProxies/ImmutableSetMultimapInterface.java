package org.apache.hadoop.hdfs.remoteProxies;

public interface ImmutableSetMultimapInterface<K, V> {
    ImmutableCollectionInterface<java.util.Map.Entry<K, V>> createEntries();
    ImmutableCollectionInterface<V> createValues();
    java.util.Set<java.util.Map.Entry<K, V>> entries();
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7);
    <K, V> ImmutableMultimapInterface<K, V> copyOf(org.apache.hadoop.thirdparty.com.google.common.collect.Multimap<? extends K, ? extends V> arg0);
//    java.util.Collection entries();
    <K, V> ImmutableSetMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3);
    <K, V> ImmutableSetMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5);
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1);
//    ImmutableCollectionInterface<java.util.Map.Entry<K, V>> entries();
    java.util.Spliterator<java.util.Map.Entry<K, V>> entrySpliterator();
    <T, K, V> java.util.stream.Collector<T, ?, org.apache.hadoop.thirdparty.com.google.common.collect.ImmutableSetMultimap<K, V>> toImmutableSetMultimap(java.util.function.Function<? super T, ? extends K> arg0, java.util.function.Function<? super T, ? extends V> arg1);
//    java.util.Collection<java.util.Map.Entry<K, V>> createEntries();
//    java.util.Collection get(java.lang.Object arg0);
//    <K, V> BuilderInterface<K, V> builder();
    boolean remove(java.lang.Object arg0, java.lang.Object arg1);
    void writeObject(java.io.ObjectOutputStream arg0) throws java.io.IOException;
    void forEach(java.util.function.BiConsumer<? super K, ? super V> arg0);
    java.util.Collection<V> replaceValues(K arg0, java.lang.Iterable<? extends V> arg1);
    java.util.Set<K> keySet();
    <K, V> ImmutableSetMultimapInterface<K, V> copyOf(org.apache.hadoop.thirdparty.com.google.common.collect.Multimap<? extends K, ? extends V> arg0, java.util.Comparator<? super V> arg1);
    java.util.Comparator<? super V> valueComparator();
//    ImmutableCollectionInterface<V> get(K arg0);
    <K, V> ImmutableMultimapInterface<K, V> of();
    <K, V> ImmutableMultimapInterface<K, V> copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>> arg0);
//    <K, V> ImmutableSetMultimapInterface<K, V> of();
//    java.util.Collection<V> get(K arg0);
    void readObject(java.io.ObjectInputStream arg0) throws java.io.IOException, java.lang.ClassNotFoundException;
    boolean putAll(org.apache.hadoop.thirdparty.com.google.common.collect.Multimap<? extends K, ? extends V> arg0);
    int size();
    UnmodifiableIteratorInterface<V> valueIterator();
    <V> ImmutableSetInterface<V> valueSet(java.util.Comparator<? super V> arg0, java.util.Collection<? extends V> arg1);
//    ImmutableSetInterface<K> keySet();
//    java.util.Collection<V> createValues();
    boolean put(K arg0, V arg1);
    java.util.Map<K, java.util.Collection<V>> asMap();
    boolean putAll(K arg0, java.lang.Iterable<? extends V> arg1);
    java.util.Iterator<java.util.Map.Entry<K, V>> entryIterator();
    boolean containsEntry(java.lang.Object arg0, java.lang.Object arg1);
    java.util.Set<K> createKeySet();
    <T, K, V> java.util.stream.Collector<T, ?, org.apache.hadoop.thirdparty.com.google.common.collect.ImmutableSetMultimap<K, V>> flatteningToImmutableSetMultimap(java.util.function.Function<? super T, ? extends K> arg0, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>> arg1);
    org.apache.hadoop.thirdparty.com.google.common.collect.Multiset<K> createKeys();
//    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3);
//    UnmodifiableIteratorInterface<java.util.Map.Entry<K, V>> entryIterator();
    ImmutableSetMultimapInterface<V, K> invert();
    boolean isPartialView();
    ImmutableMultimapInterface<V, K> inverse();
//    ImmutableSetInterface<java.util.Map.Entry<K, V>> entries();
    boolean containsValue(java.lang.Object arg0);
    boolean isEmpty();
    int hashCode();
//    <V> BuilderInterface<V> valuesBuilder(java.util.Comparator<? super V> arg0);
    void clear();
    ImmutableCollectionInterface<V> values();
    java.util.Collection removeAll(java.lang.Object arg0);
//    <K, V> ImmutableSetMultimapInterface<K, V> of(K arg0, V arg1);
//    java.util.Collection replaceValues(java.lang.Object arg0, java.lang.Iterable arg1);
    java.util.Map<K, java.util.Collection<V>> createAsMap();
//    ImmutableCollectionInterface<V> replaceValues(K arg0, java.lang.Iterable<? extends V> arg1);
    boolean containsKey(java.lang.Object arg0);
    java.lang.String toString();
//    java.util.Collection<V> removeAll(java.lang.Object arg0);
//    java.util.Iterator<V> valueIterator();
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9);
//    <K, V> ImmutableSetMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9);
    void lambda$forEach$0(java.util.function.BiConsumer arg0, java.util.Map.Entry arg1);
//    java.util.Set<V> get(K arg0);
//    ImmutableSetMultimapInterface<V, K> inverse();
//    ImmutableMultisetInterface<K> createKeys();
//    ImmutableSetInterface<V> removeAll(java.lang.Object arg0);
//    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5);
//    java.util.Collection<V> values();
    <K, V> ImmutableSetMultimapInterface<K, V> fromMapEntries(java.util.Collection<? extends java.util.Map.Entry<? extends K, ? extends java.util.Collection<? extends V>>> arg0, java.util.Comparator<? super V> arg1);
    java.util.Spliterator<V> valueSpliterator();
    boolean equals(java.lang.Object arg0);
//    ImmutableSetInterface<V> get(K arg0);
//    ImmutableMapInterface<K, java.util.Collection<V>> asMap();
//    <K, V> BuilderInterface<K, V> builder();
//    java.util.Set<V> replaceValues(K arg0, java.lang.Iterable<? extends V> arg1);
//    <K, V> ImmutableSetMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7);
    org.apache.hadoop.thirdparty.com.google.common.collect.Multiset<K> keys();
//    java.util.Set<V> removeAll(java.lang.Object arg0);
//    ImmutableCollectionInterface<V> removeAll(java.lang.Object arg0);
//    <K, V> ImmutableSetMultimapInterface<K, V> copyOf(org.apache.hadoop.thirdparty.com.google.common.collect.Multimap<? extends K, ? extends V> arg0);
//    ImmutableMultisetInterface<K> keys();
//    java.util.Collection<java.util.Map.Entry<K, V>> entries();
//    <K, V> ImmutableSetMultimapInterface<K, V> copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>> arg0);
//    ImmutableSetInterface<V> replaceValues(K arg0, java.lang.Iterable<? extends V> arg1);
    <V> ImmutableSetInterface<V> emptySet(java.util.Comparator<? super V> arg0);
}