package org.apache.hadoop.hdfs.remoteProxies;

public interface HttpChannelInterface {
    org.eclipse.jetty.server.RequestLog getRequestLog();
    boolean isPersistent();
//    void dispatch(javax.servlet.DispatcherType arg0, org.eclipse.jetty.server.HttpChannel.Dispatchable arg1) throws java.io.IOException, javax.servlet.ServletException;
    HostPortInterface getServerAuthority();
    org.eclipse.jetty.util.thread.Scheduler getScheduler();
    boolean onEarlyEOF();
    void onBlockWaitForContentFailure(java.lang.Throwable arg0);
    HttpInputInterface newHttpInput(HttpChannelStateInterface arg0);
    boolean handle();
    java.lang.String getLocalName();
    java.lang.Throwable unwrap(java.lang.Throwable arg0, java.lang.Class<?>... arg1);
    HttpChannelStateInterface getState();
    HttpConfigurationInterface getHttpConfiguration();
    void notifyEvent2(java.util.function.Function<org.eclipse.jetty.server.HttpChannel.Listener, java.util.function.BiConsumer<org.eclipse.jetty.server.Request, java.lang.Throwable>> arg0, RequestInterface arg1, java.lang.Throwable arg2);
    boolean sendResponse(ResponseInterface arg0, java.nio.ByteBuffer arg1, boolean arg2) throws java.io.IOException;
    void notifyEvent1(java.util.function.Function<org.eclipse.jetty.server.HttpChannel.Listener, java.util.function.Consumer<org.eclipse.jetty.server.Request>> arg0, RequestInterface arg1);
    long getBytesWritten();
    ResponseInterface getCommittedMetaData();
    void commit(ResponseInterface arg0);
    void execute(java.lang.Runnable arg0);
    void onAsyncWaitForContent();
    void abort(java.lang.Throwable arg0);
    void addRequestLog(org.eclipse.jetty.server.RequestLog arg0);
    void setRequestLog(org.eclipse.jetty.server.RequestLog arg0);
    boolean useDirectBuffers();
    boolean isCommitted();
    long getRequests();
    boolean onContent(ContentInterface arg0);
    boolean isOptimizedForDirectBuffers();
    org.eclipse.jetty.server.HttpOutput.Interceptor getNextInterceptor();
    void recycle();
    boolean isExpecting102Processing();
    org.eclipse.jetty.io.EndPoint getEndPoint();
    void ensureConsumeAllOrNotPersistent();
    void onBlockWaitForContent();
    ResponseInterface getResponse();
    RequestInterface getRequest();
    HttpOutputInterface newHttpOutput();
    org.eclipse.jetty.io.ByteBufferPool getByteBufferPool();
    boolean isSendError();
    java.lang.String formatAddrOrHost(java.lang.String arg0);
    java.net.InetSocketAddress getRemoteAddress();
    void onCompleted();
    boolean addListener(org.eclipse.jetty.server.HttpChannel.Listener arg0);
    void handleException(java.lang.Throwable arg0);
    long getIdleTimeout();
    void onRequest(RequestInterface arg0);
    void onTrailers(HttpFieldsInterface arg0);
    java.util.List<org.eclipse.jetty.server.HttpChannel.Listener> getTransientListeners();
    void onBadMessage(BadMessageExceptionInterface arg0);
    boolean sendResponse(ResponseInterface arg0, java.nio.ByteBuffer arg1, boolean arg2, org.eclipse.jetty.util.Callback arg3);
    void run();
    int getLocalPort();
    org.eclipse.jetty.server.Connector getConnector();
    void notifyEvent2(java.util.function.Function<org.eclipse.jetty.server.HttpChannel.Listener, java.util.function.BiConsumer<org.eclipse.jetty.server.Request, java.nio.ByteBuffer>> arg0, RequestInterface arg1, java.nio.ByteBuffer arg2);
    boolean removeListener(org.eclipse.jetty.server.HttpChannel.Listener arg0);
    org.eclipse.jetty.io.Connection getConnection();
    void continue100(int arg0) throws java.io.IOException;
    void write(java.nio.ByteBuffer arg0, boolean arg1, org.eclipse.jetty.util.Callback arg2);
    boolean onRequestComplete();
    boolean isRequestCompleted();
    boolean isExpecting100Continue();
    boolean onContentComplete();
    org.eclipse.jetty.server.HttpTransport getHttpTransport();
    ServerInterface getServer();
    void sendResponseAndComplete();
    boolean isResponseCompleted();
    java.lang.String toString();
    void resetBuffer();
    java.net.InetSocketAddress getLocalAddress();
    void setIdleTimeout(long arg0);
}