package org.apache.hadoop.hdfs.remoteProxies;

public interface ImmutableMultimapInterface<K, V> {
    boolean putAll(K arg0, java.lang.Iterable<? extends V> arg1);
    java.lang.String toString();
    java.util.Collection<V> replaceValues(K arg0, java.lang.Iterable<? extends V> arg1);
    org.apache.hadoop.thirdparty.com.google.common.collect.Multiset<K> keys();
    boolean remove(java.lang.Object arg0, java.lang.Object arg1);
    UnmodifiableIteratorInterface<V> valueIterator();
    ImmutableCollectionInterface<V> values();
    ImmutableCollectionInterface<java.util.Map.Entry<K, V>> entries();
    <K, V> ImmutableMultimapInterface<K, V> of();
    UnmodifiableIteratorInterface<java.util.Map.Entry<K, V>> entryIterator();
    ImmutableCollectionInterface<V> removeAll(java.lang.Object arg0);
    java.util.Collection<V> get(K arg0);
    java.util.Spliterator<V> valueSpliterator();
//    java.util.Iterator<java.util.Map.Entry<K, V>> entryIterator();
//    ImmutableMultisetInterface<K> keys();
//    ImmutableCollectionInterface<V> replaceValues(K arg0, java.lang.Iterable<? extends V> arg1);
    ImmutableMultisetInterface<K> createKeys();
//    java.util.Collection<java.util.Map.Entry<K, V>> entries();
    boolean putAll(org.apache.hadoop.thirdparty.com.google.common.collect.Multimap<? extends K, ? extends V> arg0);
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7);
    boolean containsKey(java.lang.Object arg0);
    void forEach(java.util.function.BiConsumer<? super K, ? super V> arg0);
    ImmutableCollectionInterface<java.util.Map.Entry<K, V>> createEntries();
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3);
//    java.util.Collection<V> values();
    java.util.Map<K, java.util.Collection<V>> createAsMap();
//    org.apache.hadoop.thirdparty.com.google.common.collect.Multiset<K> createKeys();
//    java.util.Collection<java.util.Map.Entry<K, V>> createEntries();
    void lambda$forEach$0(java.util.function.BiConsumer arg0, java.util.Map.Entry arg1);
//    <K, V> BuilderInterface<K, V> builder();
    java.util.Map<K, java.util.Collection<V>> asMap();
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5);
    boolean isPartialView();
    boolean isEmpty();
    int size();
    java.util.Set<K> createKeySet();
//    ImmutableCollectionInterface<V> get(K arg0);
//    ImmutableMapInterface<K, java.util.Collection<V>> asMap();
    <K, V> ImmutableMultimapInterface<K, V> copyOf(org.apache.hadoop.thirdparty.com.google.common.collect.Multimap<? extends K, ? extends V> arg0);
    java.util.Set<K> keySet();
    boolean put(K arg0, V arg1);
    void clear();
    <K, V> ImmutableMultimapInterface<K, V> copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K, ? extends V>> arg0);
    int hashCode();
    java.util.Spliterator<java.util.Map.Entry<K, V>> entrySpliterator();
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1);
    boolean containsEntry(java.lang.Object arg0, java.lang.Object arg1);
//    java.util.Iterator<V> valueIterator();
    java.util.Collection<V> createValues();
//    ImmutableSetInterface<K> keySet();
    <K, V> ImmutableMultimapInterface<K, V> of(K arg0, V arg1, K arg2, V arg3, K arg4, V arg5, K arg6, V arg7, K arg8, V arg9);
    boolean containsValue(java.lang.Object arg0);
    boolean equals(java.lang.Object arg0);
    ImmutableMultimapInterface<V, K> inverse();
//    ImmutableCollectionInterface<V> createValues();
//    java.util.Collection<V> removeAll(java.lang.Object arg0);
}