package org.apache.hadoop.hdfs.remoteProxies;

public interface BlockPoolSliceStorageInterface {
    void checkVersionUpgradable(int arg0) throws java.io.IOException;
    int getServiceLayoutVersion();
    void setLayoutVersion(java.util.Properties arg0, StorageDirectoryInterface arg1) throws org.apache.hadoop.hdfs.server.common.IncorrectVersionException, org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    void setServiceLayoutVersion(int arg0);
    java.util.List<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> getStorageDirs();
    NamespaceInfoInterface getNamespaceInfo();
    int getNumStorageDirs();
    java.util.Iterator<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> dirIterator();
    java.lang.String listStorageDirectories();
    java.lang.String getRestoreDirectory(java.io.File arg0);
    void setBlockPoolID(java.io.File arg0, java.lang.String arg1) throws org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    boolean containsStorageDir(StorageLocationInterface arg0, java.lang.String arg1) throws java.io.IOException;
    boolean isPreUpgradableLayout(StorageDirectoryInterface arg0) throws java.io.IOException;
    void stopTrashCleaner();
    java.lang.Iterable<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> dirIterable(org.apache.hadoop.hdfs.server.common.Storage.StorageDirType arg0);
    void setClusterId(java.util.Properties arg0, int arg1, StorageDirectoryInterface arg2) throws org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    void writeProperties(java.io.File arg0, StorageDirectoryInterface arg1) throws java.io.IOException;
    java.lang.String getProperty(java.util.Properties arg0, StorageDirectoryInterface arg1, java.lang.String arg2) throws org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    boolean doTransition(StorageDirectoryInterface arg0, NamespaceInfoInterface arg1, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg2, java.util.List<java.util.concurrent.Callable<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory>> arg3, ConfigurationInterface arg4) throws java.io.IOException;
    void setPropertiesFromFields(java.util.Properties arg0, StorageDirectoryInterface arg1) throws java.io.IOException;
    void setNamespaceID(java.util.Properties arg0, StorageDirectoryInterface arg1) throws org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    void remove(java.io.File arg0);
    void writeProperties(java.io.File arg0, java.util.Properties arg1) throws java.io.IOException;
    StorageDirectoryInterface getSingularStorageDir();
    java.util.List<java.io.File> getFiles(org.apache.hadoop.hdfs.server.common.Storage.StorageDirType arg0, java.lang.String arg1);
    void doUpgrade(StorageDirectoryInterface arg0, NamespaceInfoInterface arg1, java.util.List<java.util.concurrent.Callable<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory>> arg2, ConfigurationInterface arg3) throws java.io.IOException;
    void readPreviousVersionProperties(StorageDirectoryInterface arg0) throws java.io.IOException;
    void nativeCopyFileUnbuffered(java.io.File arg0, java.io.File arg1, boolean arg2) throws java.io.IOException;
    boolean trashEnabled();
    long getCTime();
    java.lang.String getTrashDirectory(ReplicaInfoInterface arg0);
    boolean containsStorageDir(StorageLocationInterface arg0) throws java.io.IOException;
    java.util.Properties readPropertiesFile(java.io.File arg0) throws java.io.IOException;
    int restoreBlockFilesFromTrash(java.io.File arg0) throws java.io.IOException;
    java.io.File getTrashRootDir(StorageDirectoryInterface arg0);
    java.lang.String getClusterID();
    void deleteDir(java.io.File arg0) throws java.io.IOException;
    java.lang.String getTrashDirectory(java.io.File arg0);
    java.lang.String getBuildVersion();
    void setStorageInfo(StorageInfoInterface arg0);
    void setcTime(java.util.Properties arg0, StorageDirectoryInterface arg1) throws org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    java.lang.String getDataNodeStorageRoot(java.lang.String arg0);
    java.io.File getBpRoot(java.lang.String arg0, java.io.File arg1);
    StorageDirectoryInterface getStorageDir(int arg0);
    boolean isTrashAllowed(java.io.File arg0);
    void setFieldsFromProperties(java.util.Properties arg0, StorageDirectoryInterface arg1) throws java.io.IOException;
    void readProperties(StorageDirectoryInterface arg0) throws java.io.IOException;
    void setRollingUpgradeMarkers(java.util.List<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> arg0) throws java.io.IOException;
    void doRollback(StorageDirectoryInterface arg0, NamespaceInfoInterface arg1) throws java.io.IOException;
    java.lang.String getRegistrationID(StorageInfoInterface arg0);
    void linkAllBlocks(java.io.File arg0, java.io.File arg1, int arg2, ConfigurationInterface arg3) throws java.io.IOException;
    void clearRollingUpgradeMarkers(java.util.List<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> arg0) throws java.io.IOException;
    boolean is203LayoutVersion(int arg0);
    void checkOldLayoutStorage(StorageDirectoryInterface arg0) throws java.io.IOException;
    void checkStorageType(java.util.Properties arg0, StorageDirectoryInterface arg1) throws org.apache.hadoop.hdfs.server.common.InconsistentFSStateException;
    int getLayoutVersion();
    void format(java.io.File arg0, NamespaceInfoInterface arg1) throws java.io.IOException;
    void cleanupDetachDir(java.io.File arg0) throws java.io.IOException;
    void clearTrash();
    java.util.Map<java.lang.Integer, java.util.SortedSet<org.apache.hadoop.hdfs.protocol.LayoutVersion.LayoutFeature>> getServiceLayoutFeatureMap();
    boolean containsStorageDir(java.io.File arg0) throws java.io.IOException;
    void addStorageDir(StorageDirectoryInterface arg0);
    java.util.Iterator<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> dirIterator(boolean arg0);
    java.util.Iterator<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> dirIterator(org.apache.hadoop.hdfs.server.common.Storage.StorageDirType arg0, boolean arg1);
    void doFinalize(java.io.File arg0) throws java.io.IOException;
    void unlockAll() throws java.io.IOException;
    void writeProperties(StorageDirectoryInterface arg0) throws java.io.IOException;
    java.util.List<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> loadBpStorageDirectories(NamespaceInfoInterface arg0, StorageLocationInterface arg1, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg2, java.util.List<java.util.concurrent.Callable<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory>> arg3, ConfigurationInterface arg4) throws java.io.IOException;
    void rename(java.io.File arg0, java.io.File arg1) throws java.io.IOException;
    void doUpgrade(java.lang.String arg0, StorageDirectoryInterface arg1, NamespaceInfoInterface arg2, java.io.File arg3, java.io.File arg4, java.io.File arg5, int arg6, ConfigurationInterface arg7) throws java.io.IOException;
    void writeAll() throws java.io.IOException;
    java.lang.String toColonSeparatedString();
    java.util.Iterator<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> dirIterator(org.apache.hadoop.hdfs.server.common.Storage.StorageDirType arg0);
    StorageDirectoryInterface loadStorageDirectory(NamespaceInfoInterface arg0, StorageLocationInterface arg1, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg2, java.util.List<java.util.concurrent.Callable<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory>> arg3, ConfigurationInterface arg4) throws java.io.IOException;
    int getNamespaceID();
    java.lang.String getClusterIdFromColonSeparatedString(java.lang.String arg0);
    void format(StorageDirectoryInterface arg0, NamespaceInfoInterface arg1) throws java.io.IOException;
    java.lang.String toString();
    boolean confirmFormat(java.lang.Iterable<? extends org.apache.hadoop.hdfs.server.common.Storage.FormatConfirmable> arg0, boolean arg1, boolean arg2) throws java.io.IOException;
    int getNsIdFromColonSeparatedString(java.lang.String arg0);
    java.util.List<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory> recoverTransitionRead(NamespaceInfoInterface arg0, StorageLocationInterface arg1, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.StartupOption arg2, java.util.List<java.util.concurrent.Callable<org.apache.hadoop.hdfs.server.common.Storage.StorageDirectory>> arg3, ConfigurationInterface arg4) throws java.io.IOException;
    boolean versionSupportsFederation(java.util.Map<java.lang.Integer, java.util.SortedSet<org.apache.hadoop.hdfs.protocol.LayoutVersion.LayoutFeature>> arg0);
}