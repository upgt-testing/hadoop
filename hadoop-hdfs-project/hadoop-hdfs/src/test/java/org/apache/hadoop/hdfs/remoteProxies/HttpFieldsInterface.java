package org.apache.hadoop.hdfs.remoteProxies;

public interface HttpFieldsInterface {
    boolean contains(org.eclipse.jetty.http.HttpHeader arg0, java.lang.String arg1);
    void putLongField(org.eclipse.jetty.http.HttpHeader arg0, long arg1);
    boolean contains(org.eclipse.jetty.http.HttpHeader arg0);
    java.util.Enumeration<java.lang.String> getValues(java.lang.String arg0);
    void computeField(org.eclipse.jetty.http.HttpHeader arg0, java.util.function.BiFunction<org.eclipse.jetty.http.HttpHeader, java.util.List<org.eclipse.jetty.http.HttpField>, org.eclipse.jetty.http.HttpField> arg1);
    void put(org.eclipse.jetty.http.HttpHeader arg0, org.eclipse.jetty.http.HttpHeaderValue arg1);
    HttpFieldInterface getField(int arg0);
    void add(org.eclipse.jetty.http.HttpHeader arg0, org.eclipse.jetty.http.HttpHeaderValue arg1);
    java.lang.String addCSV(QuotedCSVInterface arg0, java.lang.String... arg1);
    java.util.List<java.lang.String> qualityList(java.util.Enumeration<java.lang.String> arg0);
    void putDateField(org.eclipse.jetty.http.HttpHeader arg0, long arg1);
    void clear();
    boolean contains(java.lang.String arg0, java.lang.String arg1);
    java.lang.String get(org.eclipse.jetty.http.HttpHeader arg0);
    void put(HttpFieldInterface arg0);
    void add(org.eclipse.jetty.http.HttpHeader arg0, java.lang.String arg1);
//    void forEach(java.util.function.Consumer<? super T> arg0);
    void addAll(HttpFieldsInterface arg0);
    java.util.List<java.lang.String> getCSV(java.lang.String arg0, boolean arg1);
    void add(HttpFieldsInterface arg0);
    void put(java.lang.String arg0, java.lang.String arg1);
    void putDateField(java.lang.String arg0, long arg1);
    java.util.List<java.lang.String> getValuesList(org.eclipse.jetty.http.HttpHeader arg0);
    HttpFieldInterface remove(java.lang.String arg0);
    long getDateField(java.lang.String arg0);
    java.lang.String getStringField(java.lang.String arg0);
    java.util.Iterator<org.eclipse.jetty.http.HttpField> iterator();
    HttpFieldInterface getField(org.eclipse.jetty.http.HttpHeader arg0);
//    java.util.Spliterator<T> spliterator();
    java.lang.String toString();
    void put(org.eclipse.jetty.http.HttpHeader arg0, java.lang.String arg1);
    java.util.ListIterator<org.eclipse.jetty.http.HttpField> listIterator();
    java.lang.String getStringField(org.eclipse.jetty.http.HttpHeader arg0);
    boolean containsKey(java.lang.String arg0);
    void put(java.lang.String arg0, java.util.List<java.lang.String> arg1);
    java.lang.Float getQuality(java.lang.String arg0);
    long getLongField(java.lang.String arg0) throws java.lang.NumberFormatException;
    void putLongField(java.lang.String arg0, long arg1);
    java.util.List<java.lang.String> getQualityCSV(org.eclipse.jetty.http.HttpHeader arg0, java.util.function.ToIntFunction<java.lang.String> arg1);
    boolean equals(java.lang.Object arg0);
    java.util.List<org.eclipse.jetty.http.HttpField> getFields(org.eclipse.jetty.http.HttpHeader arg0);
    int size();
    java.util.stream.Stream<org.eclipse.jetty.http.HttpField> stream();
    java.util.List<java.lang.String> getCSV(org.eclipse.jetty.http.HttpHeader arg0, boolean arg1);
    java.lang.String stripParameters(java.lang.String arg0);
    void addDateField(java.lang.String arg0, long arg1);
    void remove(int arg0);
    java.util.Set<java.lang.String> getFieldNamesCollection();
    void add(HttpFieldInterface arg0);
    java.lang.String valueParameters(java.lang.String arg0, java.util.Map<java.lang.String, java.lang.String> arg1);
    java.util.Enumeration<java.lang.String> getFieldNames();
    boolean contains(HttpFieldInterface arg0);
    java.util.List<org.eclipse.jetty.http.HttpField> getFields(java.lang.String arg0);
    boolean addCSV(java.lang.String arg0, java.lang.String... arg1);
//    java.util.Iterator<T> iterator();
    java.util.List<java.lang.String> getValuesList(java.lang.String arg0);
    java.lang.String get(java.lang.String arg0);
    boolean addCSV(org.eclipse.jetty.http.HttpHeader arg0, java.lang.String... arg1);
    int hashCode();
    <T> void computeField(T arg0, java.util.function.BiFunction<T, java.util.List<org.eclipse.jetty.http.HttpField>, org.eclipse.jetty.http.HttpField> arg1, java.util.function.BiFunction<org.eclipse.jetty.http.HttpField, T, java.lang.Boolean> arg2);
    HttpFieldInterface getField(java.lang.String arg0);
    void add(java.lang.String arg0, java.lang.String arg1);
    java.util.List<java.lang.String> getQualityCSV(java.lang.String arg0);
    java.util.Enumeration<java.lang.String> getValues(java.lang.String arg0, java.lang.String arg1);
    HttpFieldInterface remove(org.eclipse.jetty.http.HttpHeader arg0);
    void computeField(java.lang.String arg0, java.util.function.BiFunction<java.lang.String, java.util.List<org.eclipse.jetty.http.HttpField>, org.eclipse.jetty.http.HttpField> arg1);
    java.util.List<java.lang.String> getQualityCSV(org.eclipse.jetty.http.HttpHeader arg0);
}