package org.apache.hadoop.hdfs.remoteProxies;

public interface NameNodeMetricsInterface {
    void addEditLogTailInterval(long arg0);
    void addWarmUpEDEKTime(long arg0);
    void incrBlockReceivedAndDeletedOps();
    void incrFilesAppended();
    void incrTransactionsBatchedInSync(long arg0);
    void incrCreateFileOps();
    NameNodeMetricsInterface create(ConfigurationInterface arg0, org.apache.hadoop.hdfs.server.common.HdfsServerConstants.NamenodeRole arg1);
    void incrFilesCreated();
    void incrFilesTruncated();
    void incrListSnapshottableDirOps();
    void incrFilesDeleted(long arg0);
    void addNumEditLogLoaded(long arg0);
    void addEditLogTailTime(long arg0);
    void addCacheBlockReport(long arg0);
    void addTransaction(long arg0);
    void incrCreateSymlinkOps();
    void incrGetListingOps();
    void addStorageBlockReport(long arg0);
    void incrDeleteFileOps();
    void addGetImage(long arg0);
    void addSync(long arg0);
    void setFsImageLoadTime(long arg0);
    void incrGetBlockLocations();
    void addPutImage(long arg0);
    void incrPendingDeleteBlocksCount(int arg0);
    void addEditLogFetchTime(long arg0);
    void incNumTimesReReplicationNotScheduled();
    void setBlockOpsQueued(int arg0);
    void setDeleteBlocksQueued(int arg0);
    void addGetEdit(long arg0);
    JvmMetricsInterface getJvmMetrics();
    void incrFilesRenamed();
    void incrFileInfoOps();
    void incrDeleteSnapshotOps();
    void incTimeoutReReplications();
    void incSuccessfulReReplications();
    void addResourceCheckTime(long arg0);
    void incrSnapshotDiffReportOps();
    void addGetAliasMap(long arg0);
    void incrGetAdditionalDatanodeOps();
    long totalFileOps();
    void incrGetLinkTargetOps();
    void setSafeModeTime(long arg0);
    void incrRenameSnapshotOps();
    void incrDisAllowSnapshotOps();
    void incrAddBlockOps();
    void shutdown();
    void addBlockOpsBatched(int arg0);
    void addGenerateEDEKTime(long arg0);
    void setPendingEditsCount(int arg0);
    void incrAllowSnapshotOps();
    void incrCreateSnapshotOps();
    void incrFilesInGetListingOps(int arg0);
    void decrPendingDeleteBlocksCount();
}