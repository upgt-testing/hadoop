package org.apache.hadoop.hdfs.remoteProxies;

public interface ImmutableMultisetInterface<E> {
    <E> ImmutableMultisetInterface<E> copyOf(java.lang.Iterable<? extends E> arg0);
    boolean containsAll(java.util.Collection<?> arg0);
    void lambda$forEach$1(java.util.function.Consumer arg0, org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry arg1);
    void forEachEntry(java.util.function.ObjIntConsumer<? super E> arg0);
//    java.util.Iterator<T> iterator();
    boolean addAll(java.util.Collection<? extends E> arg0);
    boolean isEmpty();
    int hashCode();
    boolean contains(java.lang.Object arg0);
    void clear();
    <E> ImmutableMultisetInterface<E> copyFromEntries(java.util.Collection<? extends org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry<? extends E>> arg0);
    <E> ImmutableMultisetInterface<E> copyOf(E[] arg0);
    <E> ImmutableMultisetInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4);
    ImmutableSetInterface<E> elementSet();
    int hugeCapacity(int arg0);
//    java.util.Spliterator<T> spliterator();
    boolean remove(java.lang.Object arg0);
    <E> java.util.stream.Collector<E, ?, org.apache.hadoop.thirdparty.com.google.common.collect.ImmutableMultiset<E>> toImmutableMultiset();
    boolean equals(java.lang.Object arg0);
    <T> T[] finishToArray(T[] arg0, java.util.Iterator<?> arg1);
    <E> ImmutableMultisetInterface<E> copyOf(java.util.Iterator<? extends E> arg0);
    int internalArrayEnd();
    <T, E> java.util.stream.Collector<T, ?, org.apache.hadoop.thirdparty.com.google.common.collect.ImmutableMultiset<E>> toImmutableMultiset(java.util.function.Function<? super T, ? extends E> arg0, java.util.function.ToIntFunction<? super T> arg1);
    int remove(java.lang.Object arg0, int arg1);
    ImmutableSetInterface<org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry<E>> entrySet();
    int count(java.lang.Object arg0);
    int setCount(E arg0, int arg1);
    boolean removeAll(java.util.Collection<?> arg0);
    <E> ImmutableMultisetInterface<E> of(E arg0);
    int internalArrayStart();
    boolean isPartialView();
    <E> ImmutableMultisetInterface<E> of(E arg0, E arg1, E arg2, E arg3);
    int size();
//    void forEach(java.util.function.Consumer<? super T> arg0);
    boolean add(E arg0);
    boolean setCount(E arg0, int arg1, int arg2);
//    java.util.Set<E> elementSet();
    ImmutableSetInterface<org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry<E>> createEntrySet();
    int add(E arg0, int arg1);
    <E> ImmutableMultisetInterface<E> of();
    <E> ImmutableMultisetInterface<E> of(E arg0, E arg1, E arg2, E arg3, E arg4, E arg5, E... arg6);
    java.lang.Object writeReplace();
    org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry<E> getEntry(int arg0);
    ImmutableListInterface<E> asList();
    boolean removeIf(java.util.function.Predicate<? super E> arg0);
    <E> ImmutableMultisetInterface<E> copyFromElements(E... arg0);
    <T> T[] toArray(T[] arg0);
    <T> T[] toArray(java.util.function.IntFunction<T[]> arg0);
    boolean retainAll(java.util.Collection<?> arg0);
//    java.util.Set<org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry<E>> entrySet();
    <E> ImmutableMultisetInterface<E> of(E arg0, E arg1);
    java.util.stream.Stream<E> parallelStream();
    java.lang.String toString();
    void lambda$forEachEntry$0(java.util.function.ObjIntConsumer arg0, org.apache.hadoop.thirdparty.com.google.common.collect.Multiset.Entry arg1);
    <E> ImmutableMultisetInterface<E> of(E arg0, E arg1, E arg2);
    UnmodifiableIteratorInterface<E> iterator();
    java.lang.Object[] internalArray();
    int copyIntoArray(java.lang.Object[] arg0, int arg1);
//    <E> BuilderInterface<E> builder();
//    java.util.Iterator<E> iterator();
    java.util.Spliterator<E> spliterator();
    java.lang.Object[] toArray();
    java.util.stream.Stream<E> stream();
}